/
    models.py
    .gitignore
    init.sh
    repo2code.py
    runs.py
    dashboard.py
    LICENSE
    .zip
    project.py
    README.md
    conv_graph.py
    repo2output.txt
    datasets.py
    auth.py
    requirements.txt
    optimize.py
    app.py
    nohup.out
    jobs.py
.git/
    index
    packed-refs
    HEAD
    ORIG_HEAD
    FETCH_HEAD
    config
    description
    COMMIT_EDITMSG
    branches/
    logs/
        HEAD
        refs/
            remotes/
                origin/
                    main
                    HEAD
            heads/
                main
    objects/
        c2/
            d341e4aa1c33010b8d06aea86ff253d7dfd83a
            ead8dc3fcfa610e53a60415cdfb6491e316826
            4c126c6065a941c34ca8a59c134413c65e056c
            089357d45fb4d3475e94c38a40efbc7ae05bfc
            31b72838a7f46a898aff616bb9cf5ca7bf8336
        a9/
            4878902971ea85254b131b16faf860d33ac0fd
            d4baee1a538fbddb0482410931adfac85c922c
            5c8e381de02fa0e01646046a66325c8907b9a7
            2a8ef213b26abf557ce6bbb953f1cc53174675
        f6/
            0955ce3e7510ff0bda4bcc49492ac66348dd99
            9647c068654366e97cd695b603eb593accf5e7
        a4/
            5f179f3f3e4fd46d4741ce9247b4f683a26f27
            0b45d54ca875538e0e9af5e17ed8cd8238a20b
        1f/
            f65236db1c3d7870f04157a6d213dfabad3bf7
            73e7d9e6a5bef4eb016453a8e7c5a711824d8f
        31/
            41575930cf513f84fc98e28af44dfed0581fb8
            833b46cfcf95a37b606c468f4e03417702d8fc
            485904254c5b561113df05e9557df4999f3c87
            0af426d2eb49ee6be1d7615c28427c0d67f916
            84c128decf47c49659bc012b7ecbe01dc018c5
        16/
            b5ea144863ef4a84a5e5c6b2d52b62e934e166
        b2/
            05fc37117dbfe0d8b43fb1879d7d7b16b6a5dd
            cdff7c67e27120d3c9de225579e8cdad2c2f6f
        00/
            888fb9659e7b2b8a90b622fa8f730cfc5b491b
            909f5101c33f7460d0d37b598f399c446b0f0a
        33/
            b7e24ee61e791c6345b66a17d72d4e074e875c
            81b73181ca39023283077b8527e3411c846304
        6b/
            1e86f56cb0a8edf36f6540bca3bf968b392705
            781da458985e0dcd584510f991d6a765e60792
            6f6465834053b6fdbdcbf4ae78972cecfb7c91
        ed/
            dfd31e64c2bbffc9671baa61d86e31071af9d3
            50c48b02ea92d98f46aa4d72b98f22f23ebf7b
        84/
            8db82f0e708fc9a71c25f31aa988c43daf9304
            56896d6f96c40ef0f44048b11964591b483eba
            72e386bb57f6ae7c72863591b606b88b42acec
            0a8db2cb110bc264725527fc16aec5a10062b9
        ab/
            4b865bf35e40d181d78cbc9fb48418e3c7f94e
            d1b55e7b2a463536c31c4eec4030acf2e1b9c2
            02c8d5081fb757dba712986ddbcf4a256b182f
            19e20b9c7a79345551b76a4b99303baefd5aa8
        e6/
            9de29bb2d1d6434b8b29ae775ad8c2e48c5391
            e20dc7d6d83b02ad1c1d7ec0de39d49768ddee
        f0/
            b763d799a5f19b9fef654554e2e1d5cb22a2a9
        b4/
            06abea5e27b7e8bb3fa66e93266602f4f5e984
            58db4259dab499ed14a3bbb53998f423c72814
            cca15e565774d0867366ac50f531668de22a22
            66da078ce4fb311f4cefc68ff7cda9d766464b
        63/
            361b53918ff2231ae168e0b451c11557c75f42
            271226fbcf18c14ebba74a82f42b385adaa884
        bf/
            5c71c1c98542b8ac45c9b786bb558c0b3bb7f9
            7ba231f678e11f15b6cff487b4edf97c3dc19f
        7b/
            c1c8220b7e94b5c8cfe5a5c947b23c4158726c
        96/
            0a46f7686ddd70861194cde255c4cdee96e92b
        b3/
            29e01ee0091f802c056300a9ef7e521bdbd708
            dd294127aba4247aaf8bfa76b23fef6fd32455
        b1/
            539c30546572bedd7276ae1a7c0e6f4ddf217e
            c3353d6e0e27afa2166f43951127cd445400e3
        f9/
            f36486fbf91822c6e6e99323e7a0e072ca8ae6
            4ac018aef1982dd13c493597742e17c5760609
            bd6e8e1edb52d19936cf272704da6505142d01
            c09fff6384e9f829c73c739cfb27153f5b7252
        1e/
            08f1f1261c5d1d38702e3ba032edc425c85d4e
            b9f6c1ed01f935d6d7c175a84b9567af86dce9
            c710484dd1404ec84a2be22f0780457177da50
            a02d7b570698c9488b403e3a253e2d261a9b82
            b64f12932fef0bab7ca0224ceb7183dcc2ab25
        37/
            be41b264972c42764ad5ba33dc819cb79c91e2
            f98e1608afad67b703bc91b79c4c9edfaa184b
        43/
            4f2607469aad4bfac65e4b8ad3a791ded3522b
            0ea301243496a68c6f4f54a50c5103c7d1740a
            0f42a83bcd34e0e593e2bbc3667dc7a56f7ba3
        d5/
            ce63394a78eded842a9cf207db0a0ed9d5aa8a
            782ba4c6a661a51705faedc6c78b5e753b403a
            630ec6ede62cf45342d923b40208ba9aaa5bbb
            d5370b0cd3e3995296071b6a0a415ec83dd07d
        40/
            579e3c14cf0597000b9e67b37856280e1315fc
        22/
            f339de380d15334d6fc56ea3743a9f31052dd8
        3f/
            8f49ad2e85a53acf95fa4034cc581cdbca08a3
        12/
            7e1f963b3f0d7d50de099a09cf3717075b3410
            3061aaeee5e940f384e17e4ea20cfd0224aaf7
            7cc2692fd06e60f000652136d725b350206b7b
        a1/
            85c2a00ad524e6c51fa1908b1740b899b10807
            87cd86c1c6d1da3f2a186b1800ec2f93cbf9b1
            f53f10808f9ee3c63cede78e6378e4576cd1de
        dc/
            c19b0023e1e79ee96160e3f3dc2b555fa6df6e
            47537c8af768ed3bf5352b5ecba12d2672cc4e
            847f1d376663dc22df2a282343d7a423442fdb
        fe/
            9c6764311361cba897e1cceb04ba009501057c
            10f4c7682ad3528bb9a2c7ff63c4d8a6e90343
        74/
            8570d0d650051c1cd26a1b113cb55d9a1f91c2
            83c4801bc03124fead8137c9d06cfc03d9fc55
        0c/
            ae9763cde8f4d9ffec23f84346aa3481cae2d6
            b4af699dbbaf393afd738706f80bcb3fc53c07
        17/
            0f230ca6b3feb698b911e4352f372c5f9fe490
            c84fa5affd6cd2596747295817f1458b1548bd
            0424785b2eec2603cb19bb810c9e84b432a4b2
            5f7373ea684a535e7d1bca39e075a5edc78f18
            8083ef5babd5e951a107aafb2e52e779d76595
            ab287f4da51bcb6dd3df39e93c6f64defc639a
        d3/
            f06c75c30afbd8677b62339cb9bc3727b7240d
        5e/
            bb32fab49f3be5566021140bda744dfc9ad42b
            7e2268a4cce42a72959647245b49b0cd22232b
            7cef4810161c5bf7bf7db4fb8a279cdb1f7485
            9b3df0d8562ee9dcdc42dc1955573e4b344e1b
        11/
            dbb0658bf1eab2575d4d74652e0cf952eedd24
            f65ffd58428291960915db4a03dd84899bdee3
            63df0a23e57f4db5367c664ef7e579a9823d05
        28/
            0f77c609705103430c602ec13f92e19762cbc9
        ee/
            e9da45afd25d74df5633b1b22e20e65de9e625
            5c21d7dd2cbd7865e559c865ed0e90e6b490db
        b9/
            9478a7b416900fb523100e704bdc6fff692b13
            55caa3a72a3ba9de577ede6222f2705ccbe288
            8c2af795129dd72d787a4b31e3e9aa68af0c36
        8d/
            54f556f50c936d618e9635647f38a2884a574d
            f18d896b9a690bde254b742fa588e2ebfc09c3
        81/
            591a6612699527979ad67b9551c5c610dd4fee
            198b9af1505a41ba1abce5ebc84d765d541316
        01/
            35cf743ea6d0f7de9c492d749f63c2dc021280
        6c/
            18150a94eb0f01419dd8e8b0f6944144db2506
        c8/
            bf03414daa99e7ac9e4037cd59b6ff750aedfc
            9b581fa1324994a8244e9957dfe4c94f4c9dff
            7bd4fcb2105083735703b78ee8d7d115da0414
        35/
            77957c8e75becb23ba35062866006d423dc15a
            fe30f8ab2d8deebe5ed7d53b220f7ad1a5a8e2
            eed196cf25dd6f4ca1105937f2915ffaf757c5
            31f0447c87d1892c7136324591c632760807c9
        14/
            5fbc29d76a15a84b3fccec559b33e39ff1b8e9
            bd96e25cd0ad7fec8088545f544acfa365aca9
        39/
            906cae71899bce3e0e87130fa066be41f76115
            9badf24868cc34a62f8458bfe2a6b212eedf19
            677ce1c3cbd49048464c498e33b4d166836e6f
            63ec91f194e76b7a6565899a70b044c1454430
        ba/
            e3c1d4d2720122726fe763af57d85357851dee
            130fd0f80856e9bf62d70ad44a316674322cf5
        27/
            3d6f1f818df0538a012c691c19e64fb0da92f3
            3a00dc15e4e14d7d2ffc23d97e5a82bb928226
        54/
            139ab3f3b2eef494f6389137c91455959b92ed
            15d10d843def0c34dd392bb82010f63bf654e1
        e1/
            ddbe79d8b075bd84f188c7256fd4138d613643
            0cf91e8503fff7ca6432d1f6856a4fa6933623
        7d/
            3df52d10598c8e0f00d4614bea54bb63caa6a4
            99fc426ddc00644bca6ad30eab59c2cb9465da
        56/
            900b4581fd6a4ce23dcf8bbde27fa5d395b722
        94/
            3191e977e7f8e0a9ccd12e7bda46a05d9e600c
            d3f66b497bf615b1054098a5d52c6f43fc5018
            fa71880d6560444cbb6a32d533a7e2f68572fc
            a6b5d0ad6308fc85ba7fa9fa4e3ac3a0d2e7c3
        75/
            5791dc1a7cb1294d4d820f14d878ca8b4e11f9
        66/
            80ef7f861fd25081cce0a6d20658aa8acbfaf4
            80d3c183096f22163acea2601f2091c1d57215
        69/
            fa48ed944fd7d8919f08a27f330cdf3c88218d
            fae7314c6881e290161860bdb161ca2d2d122c
        d1/
            a83fd9b7d51a1c6aea0dd7bb739a2297fe025c
            2e8e350464f1bfc474f43f570828975a9553a0
            6ce5d97a07f504271ee90d843d1e4083dc97f7
        64/
            b89cd5ce5329484fb2897e8151057452cacd1a
            08c55c8ef27ab16ea485d4020cb90c53baab5d
            b8cb106058f00bd0ee8c69f06900e4737fb085
            6242a7fec43da7d80803da94906dae0510b294
        18/
            0512ad80a4e880f8899db4b8a8f6846134f9bc
            83f6ba2808b45db893e6d556346517b105d708
        ac/
            94ee41ef7e32f5d13f92bdddcc7ffa51f6db7d
            c38c0bb28b0b4d3496d0c111e0706e424a8bc3
        80/
            56ebf0eba40b024b0128b173961dfab5c55e5a
            8d212f6501afc21f0c529a1d6e7a5ec7a26805
        2d/
            3e6fb2638b0a86623696e07dea997fb8fe0f04
        30/
            e963a3d57e4ccba667d797a4608eaefa1b6dbc
            95c78594018110e84f10209fad0b3146086605
            061a45bc7e93ea8509629819a2befb044b9c26
            410555435c58edd34412e418b8f17b1502627f
            d855722ee30ca068a60a23121f308d7eb2681c
        da/
            d3648c33853488a133425c285e4d267bfaca69
        06/
            6ec8746bd26929e16bf04b6a7710eaf3d6f2a2
            f05982ac7320cd97b17d058de928019710a6c2
            55e50e8c2f07bb5bbd63910638542a727216cb
            04fdebfce4af89f84095fee40d617eb4ece9ea
        08/
            69ea8725ec76a0e7abfeb1de6bd4cb14e7d868
            3157414b7ac665c638c3ff8e736a65d1a71224
            9985d84a24c28f2d6e50298b9c57d4a877d806
            ca54409c21da5e92c5cd8fdc6eb7e7525bb6b6
        82/
            f927558a3dff0ea8c20858856e70779fd02c93
            ab1cdbae82b9fa4c40b3ca27928a0ecf6a6029
            5ad4ec6349e0d57133f43748e1051003f06188
            fab95291dd2d8bd8523a13a6169a2f1e3f1f1f
        ea/
            4923954601d00554c929a1c7cda3ee8d4bf7e6
            96bb12dbad867a0c43606be4cecdfe3a3f300b
            2dabdc9622dcbef87dfa35e3408cccd4d64294
            0be0d8d1a72a427b3ae24d2f1543c0b33c9136
            1bee7207aa45ae817dc21528e122bc96836a57
            1ec5cb22ba892a86dce4c0d5f95dd60dd14869
        eb/
            3865d70145b8a2caa3d7979d5974c85f17e16c
            ad351b71d9c5901c970fd54a8836d5a48b7e90
            4374c733c1020500834ab9de54ac507ae1036e
            2e4dafb7090c24afa3e90e5431c8199b91c9d5
        e2/
            88db7dff9728702909ea9b9435b3ba74579c72
        aa/
            774b26c72da1b53c077453323419dc50861d17
            4f8567080b1159b5d99b411ea806d2cca9ab18
            f4113d82986b5dce1707092b9c9ed8ae78954f
            be1598c4dc9aed3128ed8c351156ec70862e0b
        4e/
            b20cfffaded8b5ac4c1ef76e55db5473767653
            bcaf236d7dc9990e8721bce0a5b2fbd425211a
        b5/
            5dd373126d80a2cb7cfb88c3230b85240c09c0
            d401a120910f15996397f2f0ee05e06796d6f3
            8dae65848da7b51ea980c4807f7502ad6753c1
            f911f99213901b3fa10b3388b46cf555b12697
        88/
            b48d3a6e1b52b32245f8627c876c867dc884f6
            04c467abd85320001aad13981a256eac76e4e8
        21/
            0452356fe4aa94c67f8ec2fece0960ae98bb74
            23bfc8b41f8a15c19658063f7784c77605b265
        8a/
            b529adac42c814230ec3aa30e8ff395f90b2a8
            64a389525667fdd9c4d8ef6b881c2cdd60f3dd
            f0223491d5c80f37c0271f3a1004c98f5cbb5f
        70/
            f8fda07e0bb5fbf25e88874d895741c82f5666
            043b1522291016e1d57e7526aa90191fcbcfd1
        a6/
            e34918d1db9402410e32a690439575fb216a41
            83e30e6859a377e199e633c303ef3a30a45871
        58/
            c9815f9f01e9a8f0f7142cd06e8bb79d5a8eb0
            a3132be8f6ebc524aed864643ac68ed136137a
            656e8f359b56501c68d7343c667fbf4b4c9ae0
            9f8bcc049f456d4396bde3b2faf77fc8e235be
            28962ab788c02572cd8dc74ff6f95737a89afa
            5eb380999d9de1fb112620d3375d33a67b2835
        2b/
            119ed6ba3c62a5dfa471ce8887555dddb29706
            ead617ecc85b959b52a73f2143ab75260d5b19
            bf1931da4b69bbfd1a66cee0e71b641d10ccb4
        e5/
            4c2bf3c3ca6249f7206699987f2ce22095fcf0
            24c042aa1f598b538fa9e44c9f506c6b6ff77e
        3b/
            529590ff29cf815c56c1a3ff31605c040c7637
            2cdab6607827244be561d6677d2739769551f2
            8ae16300b4cdddb0f5ee3c54370c393f2ba3be
        dd/
            59fa5aa59ccd048e955a24f22d202a6784dad0
            030999305cf5053f0002d820be20d3eb35c8f1
            ab5b3b5e6f3550293e65c597d794b23f7568d1
            95407be0f7b4586e4f4ab9814d96144850dbb8
        a5/
            15bdcfe3ab040b031b78ffd925eead0cfa6242
            a8d3e4f497f83b1f24b44a4441e968755e6ea5
            cc4dc41b2f245f60ad239c2c89eb3309183ea2
        0d/
            3328a95400fd06ed92b6c30556a1ff514bd2cf
            5562032334ba0aa9d388eabccd24740a4509f5
        c6/
            242405f364b5103015b68477a6a687fb6ce2ba
            2820381b37e81e29fb6c11ae8e836aefefc30b
            2c061a15304dba80b23b3c4ffba142a21e35fa
            29fee5aa1aadd015b667ecca0a05d8f4587e1d
        47/
            c62805aae7be9224952cfef0dfeaaee1bb806c
            ab56a4bc87d406ca133549baa7362dd0d76925
        ef/
            4202b17d2ccb620440d362560792bf6759ea7a
            8efbac0f476536a27dd9e445c467e83ce8ee23
            2c774feca035bd432f92a8b793906a4ac9f04d
            d0ce99a460dd3032e026fd5c054cddeac712a8
            f00a240632537742e42479302a86c695422a0c
            3ffb03ffb8d4089fcfe13da40b9b31879d613e
            79eaadc69a560f1f85a44aca3be0c6c4c3a4c1
        9f/
            bf0d6f05df4389a7559c2d52d67aa9263c972a
            3c0de9b2f27e3c0f37512a4de6dbb166b7058d
            6b4c0b511bf44b0ebdc63b06864fbcb4d5a762
        49/
            968a68b78baef792321108e3af359bdc2fb1dc
            5cb953cd57d100b5589572a70442f750b11104
        f1/
            1b0cf7936ad89b0e23071df17f67925c41c01d
            e4865195dbff4f58921c6c82defddea3ce5757
            cdd50c2283d80be25ca5bb83b1c3e6fc59ad16
            cd72dfd3bdf75aa3d6a030439daad00f4e84b2
        42/
            37a18120ab836ef4f2368ed062c49e1358db36
        fa/
            24e3be6624d53bf9990b58de4ce8907fef325a
            a4ea3e4efda3ba6b9e3b90a6ec78518462e101
        05/
            6745d088bc582aa922be90ba184abc89f78f91
            043b8ed5a22b629b4ef1ccb02585c51be8112d
            50234aec5a264dee3f0ba840bf2597f1bc41ba
            8fe1adfd2599182e9cec434e938219dac8f72a
        3e/
            e72b469e046c91892c8e76f9debb337038fb8f
            a5cf7658a4838db7b570b3fdae79a73440dfcd
        38/
            0244cfbf5cad8b63d6c71b62cc4bbfd8b6ee5e
            404518bce33a9ec9d9aa342e4304d1fcc7d735
            14bf1b4194e0f28d872933f9dc69f08300b73f
        b7/
            0e742d149b4ef752cc46a53a8e9dfe83789deb
        46/
            e3d9659f3a8af4a1f07620d20ac6ad31189c3e
            9c08895ef1fd05d1e3a84afc68bd525541dfb3
        0f/
            8e15707c30cd68985905d5924da3a68bfcd766
            2cfbbd1bab3d0dfb8b54229ec060844954be77
            1ec7f9fa42d724283441b5ad4d98ab7dfa46cc
        a8/
            e54162afb4b5ae06499be94a02fec9906e9c77
        7f/
            ef72e1997fecea25ee5c322c5b5722efb3e671
            aa0a1d1b9ca38c9d8e4d9cd8ce041a107d4cec
        9c/
            19370eeee29eb1ca8de278fe61634ae1ad01ea
        e9/
            982134cb616c9e469e88dcb10c23d12c79516e
            ecb2e35c3ea648655d55ff593490b36fd1ca2e
        20/
            19db2a8db6341909064172f410b2ff1217729a
            8e2102573da4008dd3c8bb847e815a872206d9
            ed9c0b8de908aa2e46325773438745d0179c16
        ad/
            f6787feadf528a89ba30547750ebc1d1985b9e
        78/
            8edd5fbc4813b2061017f175337ba4e867d4fb
            7ebfe3ac466475a4b9f56b3ff5a85e88e49f7e
        57/
            f152366fab4fee8ffc4dd88d5b975d4fbc1e26
            46e90fc6de87132f8e3c4d42741b6cef67025a
            ad3d0a0141af7f7e7c188de84520dc25443e85
        f8/
            81961d795ce33b69ef7ac903cd7f0b4aa9fc93
            a1623e10bff2434b1cf922a86dc6712c391c40
            648e03771d830eb1eedf193e83d50ea3172f45
            f751d1f9d7eea8cc4f30746e82e2c28e3b44ea
        65/
            775e22884d18c54a6f785f4ea2cdbefad1023c
            d0ee3b7d5471d71d147030267d96d4bda32744
            6c18631d920ff6a8ca796a5bb8af204c2beb49
            4ea20fe7103647d9ed75756aeadc5d5028e5a6
        de/
            0bd43a3a3c27f452f8e2edfc9cad5509672131
            a9ae016be8aedc74ec69cea811b562221c9ef5
            4cb7ffbc3747afbf6e69a4f71bc7c013e92667
            63acc67f94e2eb90ee631d667c908e4db5b5db
            89f80faf0de116775c89a4023f2067a5f4e50a
            77eab4980061c49cb6c944132fbb343ef56983
        d7/
            419cadb668e7f09fb71aae033db21d5790af0f
        60/
            a7240016eea88e6f57354fc0c3f6c8a37e3a53
        62/
            73871c8441f3047655745fa5bc4457636428f8
            24919208d27442a3e6266bff0c4ddd689c1bbd
        ec/
            994b6a975127f013e5332db5789af5b7a9f241
            9433df3788f0a6d5934d76e5294717c6180193
            e56d2db2ff924ba6cebbbb59df37a536e5cfc4
            747c1456e3b1ee63345a60435efdc10a17f728
        77/
            e745278897068da1a7f30c7ad6db2ba596f2a1
            e82da9ea9fc3ae0fe7111082da992916f79bad
        8b/
            f38075dd52fc31d4d9202ea2c39b24d04934c6
            c1308f2227181bd425cbf67ede09cf1602c6d9
            bf44e3f3b1e45ef4ec1f96dbc2d70344a6f57f
        bc/
            73e4e5c157c4a7ac91bfcef5ba284e37e71ecc
            868ecda9358a5cc2f851aa65b4877254cbb346
        cb/
            2a0762f5b090c71b2819bf4ce7576f27c52d1f
        44/
            a7e6a8f58996afa2680bf47ab55bb0c19777d4
            22e21e042ef0a20b320d5a18db4ba9e90d095e
            8efc2234b297958be23e1530e4504f61f0a176
        e0/
            1bbc543548e416199fc9e3d4215c7385ccf793
            1f1d5af0f41383caf9ab384a60909ea64487c7
            ad5685783509d76bed558bd579e56a9fbb5183
            ed26adce97f12b12257d82b94e594e033b3820
        1c/
            53ede897ded2948e3a3d204be9dc606eeb0ceb
        bd/
            bd60fecc2b411c1ae4ab894cb025e77ba9338f
            ad292fd66445d7bb3d3fa00fae2c27ca5d932e
            a6730d95c0b9f55bb6c15f67696f6b46da2462
        71/
            08ba25b5b4af4ae5ed7da77f70b8b546c703ca
        5f/
            b5f03915b1e978802a402e1ff1523a2d228aea
            8294aff4c6ce4c4ceafb776effba64e2bd0603
            2fa1bbc257d1197076645b02c63783ebb1fb41
        8e/
            e7fa1fa96e681d173e43e03ab73b389bd22900
            e8e354a65f81b599fc9f4ff78be7bcad8f3f56
            30c57abf0be0019f7f534959341d992e6029a9
            0562f52f3e08721489c15f40d0921f2faae3d3
            7863c5c08a8e89a7acae4092f7855cde88714b
            521db63ff36d40c94ba27db5127a0dc8b97449
        15/
            4ecf274a2540d1935382773ae20b47c5b71e2b
        7a/
            75c81ef168e8928ffe68317cf2422a5c4670a8
        8c/
            aec13d7219a9bdbf7321884b8422f5d5cff2f9
        04/
            9daaa4c4a316420a7c95c0ac4b6a1f1add255b
            9ee2eb486fe5d535405566791545ff9d718178
            db82aab041fa9f2a7a9b5387a9a50c3aab35a3
            19e631571ecf2b4a17cbcfca01c54153c4190e
            5f632e9a52e56de8bf3f2dac0d877418e2cefb
        68/
            bbe33167744da811acf465982b592b9456c700
            390cb9b7577bf05495d5233274ed8e9d28d7c5
        4c/
            1d0942f9d72b168c4383c76ca3b49e80b5046f
            16eecafac9842652bb0d4dd232a63bbacad8d1
            cf756382e39bddd71d4fa181140c5001290cbe
        90/
            0cb2ed0b07df2174574d7bfc8ac71f75c44eef
            b8ccfced8e58ec9dc582efa65b3f45352730f4
            e8b3960e1a32d421635a1977c3cfadabc06bf7
            9218a16ce8e7868afe0a623b8f37fc8b0039af
            8344cac497f3519af7284218a269ed75f20df6
        2c/
            ebb2309773b21a52ad19407cfaf78a1d458739
        55/
            3903d3eb7f7c53431a8249e89278989912e9da
            bc2268ec25c02379bf0d6ea3c1d5a2866daacd
        ff/
            d900b6f4bd94d2fd625f6ab9354e171a6c8e07
        53/
            1f48000a71934c1cadb93034cd28a3aff0011f
        59/
            3593dee1b5bfa8175e2c4812784defeb090552
            0cd7eb7875ace95a8b55e1568181650bf56b81
        b8/
            2edfe01f78d19b79e07c544673d1118d82f404
        32/
            7395fa2cfccbd9008b6eed0e5f4fc401ff8b4d
            fd3184235d8faf4955f0e9967b5ce9bdd28a37
            f4cec223591428fa1e6269314e9e348637d259
        a3/
            3e0f05f74dc8926a36fbb7304f79fad0f0047f
            cb0049c600a894b5adef8078172b9115a9d9a6
            bf3211002bd3210a12a711ec9e7ad261447708
            9e3deb226ce3ed4d13f2d5c4f98cc50a4d877e
            7694c61b933cb3a875e75a1c89622f386b08a8
            1b59dbf4a0722b679cc2066535f2afbe1a5315
        c7/
            87cd0152d6b913433337058257fa8afd8bd5b6
        2f/
            ff1ec9c2bd4cf5cab6e4ce93dd72b7844bedce
            2692e1a9755722d9bd574dbc313b8aa1e5f939
            ef075481278131dbb9b9efbb442a421a9aedbd
            942d807e82bcdf35d2e29051e638acbb33b171
            1d4511551e67653307bfff05c2a4a77b815bcb
            d127a74acb0a27969f760e97dd6747b19bac5e
        95/
            38e194fca5b21318832a643f8d56667483f493
            4c8e26d3072eba78115bc865475836f64c3f5a
            0f76e0585c64e1cda3f6fd2d3771fd445234d4
            c2a13bd8291c5d79f354e960bd9034c689575f
        89/
            bc105fe78aea6e6dc0f304885bcf2fb2c2ed9e
            da2cccf0ccf290560db70c4e86fd9bc150bb15
        5d/
            1470d3a4bf1fe2c6f797a1317a4a5b05c33222
            3fad02993e56e666264375cdb1647f95b216aa
        a2/
            9569191f47f2d7044581516c87c831e13c953c
            46d1a61212768947c2cdce312613c0aa9ebc04
        34/
            e0c48ddc7deffd724542305e00f167b07175c0
            744a8f91d3fdd28d7ac94b00dcc2213e2bfd59
            c23c810f2200a6f89b19fa16ec9269a53da8e9
            e76864a386ea39c2c30f6786061500cbdbbf64
        d6/
            3031b0aa8aab21e8988301180fbe8f3ce19b99
            0f5cc04add1658adf409c528e8b9af3474786a
            da6fbf3baf6e1160979644b3b12f7597617488
        cd/
            824cc05e5229f403178f5476819bb663fe0cc8
            14305b95d70a9d61e29afcd2aa5ec69fca6c37
            b49e053dd1864a1fbcaabc29da40d31025a1aa
        02/
            bd617043082dd49636df5f83639fecf400476b
            36d6e9c1ed61272364c92b35997496250e6797
            ee0aca069c86d0e6f3b769cf4f2e7cab12f836
            43c63acdd3f9b642f20d038d3762c03ed86dcc
        f4/
            2122315d9f2ea285289e63e223c34ebd59ca3c
            bb89434dcf6815d51ec373f4e3c32e79f90864
            871dfbdc689dcb67d1b7adce0b7c2fbac63b2e
        c3/
            277c2cb793f896c87e1d920fb7268b983adb5d
            8b96fa9f3f2ae4e1321b7ac6dd03831d3bd36b
            8717acc3772af0450ae6c29d52dccdd5cd8f6e
            c9fe83ef8abb3fb0b60722c598ca122f6dee7c
        3a/
            ef1a746e3c9387d180501a6e194ad2ae3b6e21
            381c022379b859ce3a2bdbae776659db62026b
            b5dbe03dab03abbd9b537d1d9856b0df83cbde
            ab165fe5242198151ef13cdf0f1ad93165d5d3
            bbc69c12a9b5ab39a2d4b11ffbbfa85fe954c2
        f7/
            e5920905b11d87dadab3758c93eeba777e7dad
            be4ea380ab39e2d80655f15f7c5f76d99c0d82
        4f/
            94bba071b34219943da437e62b0ba9ab7265c9
            75d8fba248fdf60a5b5d0fc00cf5258e551cf6
            76db62794203071aa5f4b74f49c2136d5c01e2
            39ac61740dd80e19cbc9a91865e4bf0efa9a60
        03/
            d1b6cadb2d6bbebb59b47e4e429144d184db69
            9d5b40f45967a08644e24ae2c585162e83c3a4
            988ddf8d1fbbbd2c461ad096c166f1973002b8
        97/
            6057387eb48406d92026f7e78a1b1210d32a2d
            4f039d6b815cc36c54bf2288bd1cc11b070509
        9d/
            b56e6afe19ff227a871ac9a15f36acdacbcb24
        48/
            1a034d108e69613364a67582be63476a3b6354
            a633596b413f0c1fd81adf5f0e54dde6a2ec7a
        4b/
            0f73333ee5fe5766927bc8906133d7509d99ca
            7c6385c408d07abfe82774edb22a144aacef9d
        6f/
            4a7bcdd78fcc665a54b9882f49731711aad2d8
            174d9842121465ae49ff81b061c855deeb886e
            5a711c1ba784e5e73aefcf726767aa7b4b7dde
        be/
            4f187ab1cc5b6c8d35836266e335c2d8d808ce
            4d02ffc4f2195751df593628b962959ca9f50e
            a80fb96b2cfe7c720f6042c9bf8cfbb8c6388d
        73/
            5639cf061804625017034b2958a64030c41872
            ab0c88217769b4a61aad7cdc5c60279909fa2f
            6cc26bb80e14ab0d6d576c6f269bb75567083e
            07770323bc984594c3f09d2d589f4fe96c9ef0
        29/
            e3f45e3a949658db74a1c6a8123647a5aeb6d0
            79ea1befc2c50e5ee29e6f02b3550cad6e2da9
            f8f30719c0bd902d9cb6b9d72ef468c7b808de
        6a/
            977d982f203112f09f674b8ebe9c55f629446b
            2190bfaf7e41bfb4b3c43adf389519e7176330
            574274cde691476e2edc7c95abb6f71b122846
            48cf069e78bbd50763e8cedd9c0f2afcfb190b
            483e08c8e4a9596828fcf3d9021a3868606cff
        5a/
            10435cca8fda4f24731ca0e96cf2ff1cea70fe
            b9fff97b1d1811dcc19a11374e7a359a2b8ac7
            43f59707d51ef995f9ce2e3f18f44626ad1454
            f2ae764d74ba26bb2f71ed249da5e9d4084046
        c1/
            38c60300ac222fee38e7b24a1296a70c09e922
            1a8ed1b9902cdf3d80e0e1bd86da96a1b6efb5
        info/
        fb/
            9df63ad512d5745350eef2e9deec93f2352d5f
            170a716a2c1c2176c821cf0b2902ecb400404d
            81f373f4679fa3f64796bf04cf1090601dda93
        2a/
            f5896b93b91ab2b4b4706476a110ded4652da3
            c53508d3825c3b61a5b215b4f32a5c9bf10295
            bcab20f23016aec1b88e7229937c1321700cdc
        e8/
            a26b217f5c95dfc19334f145c6f9be0e693408
            331ce2ac20dfa2f95ac40ecd4a91e1026b1bc3
        24/
            ef169ed808f73ad51ce069034ed31758f2f049
        26/
            67063e360af20a88b1e2fd5ea5f73a1561da81
            6c5d2633b43ca549cd7b1b28f2458ae1b57454
            c44f6a3f313a74b72a96072c07b237ac680d59
            1eeb9e9f8b2b4b0d119366dda99c6fd7d35c64
        1b/
            b32e3b1a738e15dad9c560a7eafe42051eba09
            1817293a67a28f934c39e65bc0dbc15fbfe5b1
            c2e5f1d5ecdcd92c43d9c04fc6e36d4a230856
        d4/
            1e39c8678bff24b97cd39cb41f2f767fc7084e
            ae8ba928d762bd6595fca5cee928db5cf64dab
        d2/
            999cc7a42f82de0515adbe83d07d2ddeeb08aa
            d6560590e4642cf48511bfae937a3a6d781e74
            a06bb677c9dbc7b384020d922e4ddb7ec525dd
            6ae1f93a86f94adc6b864866872f49272c33ef
        50/
            26e3cc8a3fcf07db722390e3926979cdb58754
            5362c7efbc1cb8e42ac4dae33909f612e7e824
            ec54ed1fdc23a714c14e767d4eb584896160aa
        f2/
            84ec45ce4b25a8773daba6722580f13e3b64b3
            299b48f067f10e444ba940b329897413b0de9c
        98/
            5b08d25a60cbd706a477cdbe5dd2831991be80
        99/
            183baef6693bfe99082d5db52dd0aa83b71115
            78e801af9805f893026cb001297deff7181e6e
            33689b43d5452522ef11f28f1634868e764823
            edd61544432b81e65f8a621cdc86f0de273eed
        10/
            9341aa8d963a478229be9b93f367cc8da632e5
            b663826c91456a8defd995fdda337281505d32
        b6/
            231ef52d99307d7723eb80590a1e9ce7c0d81d
        92/
            c1a9d35dcf6e4b91df9ef0f1083f46e3cb3d17
            b8b2b4e11c6bb717b785ff016cbc07ff2586f7
            8e46290ab158202a78d4856b69131b0222af05
            f31f9cc09b6a51215aed03f9a3332859625757
        f5/
            5a714145879080558b97e052b69e3246cd9eef
        3c/
            10117458290584e476415fcb9e91b2f08ca5f9
            afc497548e432bd004b0e525d6ef21605d7195
        9a/
            bc063c5f6ad8f26a3f71c158d34bb9d74d0c06
            a0ad14737ce05da7ef76de590783532cabb8a9
            d2decb82da58ce21eee9d93cdeac5ae9bf1dc1
        c5/
            14d7c0896508afedb1ab336d68c7d0818f2f57
            e3af82d225bcbc98f1eb2e04cf9b0040d6c0c3
            956ec62b91c59aa1a4297e5ea275ae590e9fca
            0debb0f447d936334bd75da94bb9b2e12b2b86
            a494931abfeccf5abd8a7431210d4f872107cb
        09/
            e0d075e810819fc9c7ea9438ded442ea04219b
            49d5973bc3e82ae374a6d8baeedc923db5929d
        52/
            c40f9b69e99965d95ea024e1f0f2b9e5ae5c44
            851d760a9f79e9237a2cbd616e09a83a1ec279
            53e46af8a3f1678b7afabd44dd5f29e97b778c
        b0/
            3bc171b2ecdc32ca0f09fb9b74e0769536b493
            9d47541dbfcbd785d6f6286cc5562c79531934
        e4/
            f8aa023c08c784dd53b2919c5120fb67efe6ab
        5c/
            c115c03ad4e7e517853d9813f05bfc61e8f16c
        87/
            e9bdfa59b71bba205791fb36385a25788fef34
            4dd4d18b1f6b1463b4b7a451732017d0435acb
            658c2a7a72f1ef6fb09eadc635b320ddafd262
        3d/
            9fac78488acea8dc244932816bc84886ce786a
            1e5ff4978c63117ccd4c2b002d185b2861c45c
            b53886ef323713d216d5ae33764b7aee650f23
        d0/
            519d3d5e8f4b3e9b66813ca5cca8dda0069c00
            ecb1baa8caf97072af1bbf3a77ec2ee0b6d894
        83/
            d49964f882087d8331726d31476c1a32581dae
            256b7a402d8cdcf822567d21496d274537afb5
        86/
            ac6d623018fe20c48b871912959430cc60e623
            94aaac9c74c9a93a0417c48811a472ca06731c
            3290210576b9f451744b9c880145b4442e505f
            3f5debbb6decfeb93ad3532e22a814af67e60f
            0fa82f9f45daf30b3b909f90bb1d38fe330169
            bbd5ea9959a15727fbaa6f32fcef7d3bab7bc0
        67/
            7f9fb3e5c257126366479c7eb4373b26774413
            93259d8ef49911436bd3847fec28b21eef2392
            a29a783379f5cfc6cf30fdd5a1c12cfa9f235e
        93/
            e22e90393aa8cd9acaeef8d53b46ddbf01f1e4
        fc/
            60fa4cbc2bd01d84627b4f49647e138937d63f
            6e111fdb2815d1fc116064d6319248f92aa351
            42c0a4a5a57b4c26dd4ce697f3e2d66ef542be
        45/
            53b25d02007e5e461c365be8b679a95636339e
            597eb080b3f1f206269632b65fc8397db1f4f7
        7e/
            9e552a7cac4ce4cd2c685414162319266f8f14
            d2620068cc92946332331914d8e4dd4a92c148
            e8cfcff3e254eef0bd9714904ebadf75f95f97
            f8e82e62181b4655f5b203eff33e26cae331d6
        1a/
            31d70a44756ec84e3c1c39cd3407a839657460
        f3/
            a43cb885c5816abe534d4d99438d89662280b0
            a20cca4ae2ff8b54b5216fbdfd12d41b3fbe83
        pack/
        91/
            a770bdef09fdbc03a59b42f0724792073e0a55
            6b6f5562ae9dbdc98db72de003366cb4456153
            674e099e4a0b88935ad9879bc66474a928a424
        c0/
            f19d8a3b4097a2f5dfbb731c248d9d8bdbded5
            1e22b25af7d8378b8392ab5df8c6da8146cab0
        ce/
            a2199b5d5482871635955154d3c7fc3a2d4601
            597baca887c0e8c6ada0375ccdd00c9b1b6dc6
        7c/
            3f993037288656b0e248b96cf9ed7c72315c36
            271982d8237a19befa2de710dd85319409ff50
        a7/
            3ac344becb33dc41a641aad39a28dceb3aa82d
            576615a226e3a28486fafbbfd39fe53062456c
            9e16a2f879fcdae8773940e0a324c3a5b4804a
        2e/
            737870663bb4ce4e947a0b40f7975a85fd0fb9
        db/
            1706e84dd21f6571018ad2fbd07951d42c9fc4
            1fd0086542de2f103b1fb889504108728151c9
            c1cee5c085fc912d6f1985a094fb89fff556b9
            167771576635070abcf470989cfd7abcf08f2e
            c6cc32e5e257c7af16b5e1b8e20f7f4732623e
        e3/
            282434cbc48acc82ea98d9f6d6543966a2b85e
            05c1d9b418c8658e7992ccb19f9bf9f4d2fd13
        d9/
            59db9d0f677ec5cfa1e02663d0e6a325c15dc9
            46dd9b70604daf334b8111c7b8da5d32af066b
            de62005a98f1cc6d8f32243ab9f5ce5cc38ec6
        79/
            61e4d07def1555c0778faf2b0b56d80b021d64
            33ad423d724290d9b226040218c45fb61772dd
            6f79c97da021d3418d48e566f4f83706e34632
            225c6685275693dd56ec137a05328cf6e49d32
        1d/
            c656c2fdbde8b3d28a5731c283e54cf9b2b96d
            033e610c19e39f002eb4a41403f96ff15cf16f
        a0/
            87e13ccf3c74d1323f34c81320b9bcdabc0f8a
            42ad65da421ecada6071fdd22b138968c0ee86
        6e/
            9bc01a3984d27a31c890380f737dc1ad363bea
            88e98a3bcced7e32bc6e761dc1727361fd9068
        85/
            c22f75e0cff208ddb8fe205fb13d31aada6baa
        0b/
            79f92c0b41788ec6c4cb3354ccb3831477fe5a
            1ed15f190c472cb0809568c6e4717e43c8cec0
            2b7b758efa790962472aac8a20063a3796adc4
        9b/
            32ae455d595641478d8f1bc745984ddf101f0b
            1731997a64b07cb3d23f0c5dd57b108ab28f9f
        ca/
            7bc9753e6f0dd121c79105fd4d5779f9586965
        19/
            950d7d3d0b8638afc9ce857d82d63938b09998
            1cf16ce8edd5d1156b29e5937c0afd28844e8b
        25/
            751b87a7aba82da673bc6b31fcb517becfd750
            c9296f0745dd367d37496db8c9e8549dff9d70
            c1fdf3b333f11345058f2071ff9148e73eb954
        0e/
            97c90a301e2d5b27ac1eaab77165d9a7ef3505
        ae/
            41320d7ddd0169f7edac7940eeccbd4d9ead0e
            034299b0e7efc376345b6a8e876be3ff3ee341
        07/
            6889051872c5b90a3616cc8aff811591e62e7a
    hooks/
        pre-merge-commit.sample
        pre-push.sample
        pre-commit.sample
        pre-applypatch.sample
        fsmonitor-watchman.sample
        pre-rebase.sample
        prepare-commit-msg.sample
        update.sample
        pre-receive.sample
        commit-msg.sample
        post-update.sample
        applypatch-msg.sample
    info/
        exclude
    refs/
        tags/
        remotes/
            origin/
                main
                HEAD
        heads/
            main
.templates__/
    experiments.html
    datasets.html
    sign-up.html
    dashboard.html
    sign-in.html
    jobs.html
    models.html
    base.html
.src/
    models.js
    datasets.js
    experiments.js
    base.js
    jobs.js
.vscode/
    settings.json
edgeai/
    cli/
        cli.py
    users/
        users.json
        jyp/
            default/
                models/
                    src/
                        meta.json
                        dataset.py
                        model.py
                        config.yaml
                        preprocess.py
                        trainer.py
                        callbacks.py
                ___/
                    experiment/
                        meta.json
                        config.yaml
                        src/
                            optimizer.py
                            preprocess.py
                            transforms.py
                            metric.py
                            augmentation.py
                            callbacks.py
                            loss.py
                libs/
                    dataloader/
                        __init__.py
                        augment.py
                        preprocessing.py
                        __pycache__/
                            preprocessing.cpython-37.pyc
                            augment.cpython-37.pyc
                            __init__.cpython-37.pyc
                            dataset_factory.cpython-37.pyc
                    utils/
                        metrics.py
                jobs/
                    job_search/
                        meta.json
                        config.yaml
                        progress.json
                        values.json
                    job_train/
                        meta.json
                        config.yaml
                        progress.json
                        log.json
                        values.json
                    job_optimize/
                        meta.json
                        progress.json
                        log.json
                        values.json
                    job_query/
                        meta.json
                        config.yaml
                        progress.json
                        log.json
                        values.json
                    job_eval/
                        meta.json
                        config.yaml
                        progress.json
                        log.json
                        values.json
                    job_profile/
                        meta.json
                        config.yaml
                        progress.json
                        log.json
                        values.json
                experiments/
                    meta.json
                    config.yaml
                    runs.py
                    runs.log
                    requirements.txt
                datasets/
                    meta.json
                    config.yaml
                    src/
                        collate_fn.py
                        datasets.py
    engine/
        train.py
    template/
        targets.txt
        project/
            optimizations/
                quantize.py
                channel_prune.py
                custom.py
            models/
                src/
                    meta.json
                    dataset.py
                    model.py
                    config.yaml
                    trainer.py
                    callbacks.py
            runs/
                meta.json
                config.yaml
                import.txt
                runs.py
                engine.txt
                requirements.txt
            datasets/
                meta.json
                config.yaml
                src/
                    collate_fn.py
                    datasets.py
        blank_project/
            optimizations/
            deployment/
            models/
            runs/
            pipelines/
            datasets/
workspace/
    edge/
        111111/
            optimizations/
            deployment/
            models/
                vit_b_16/
                    meta.json
                    model.py
                    config.yaml
                    callbacks.py
            runs/
            pipelines/
            datasets/
                CIFAR100/
                    meta.json
                    config.yaml
                    collate_fn.py
                    datasets.py
        new1/
            optimizations/
            deployment/
            models/
                vit_b_16/
                    meta.json
                    model.py
                    config.yaml
                    callbacks.py
            runs/
            pipelines/
            datasets/
                CIFAR100/
                    meta.json
                    config.yaml
                    collate_fn.py
                    datasets.py
        12344/
            optimizations/
            deployment/
            models/
                vit_b_16/
                    meta.json
                    model.py
                    config.yaml
                    callbacks.py
            runs/
            pipelines/
            datasets/
                CIFAR100/
                    meta.json
                    config.yaml
                    collate_fn.py
                    datasets.py
        111/
            optimizations/
            deployment/
            models/
                vit_b_16/
                    meta.json
                    model.py
                    config.yaml
                    callbacks.py
            runs/
            pipelines/
            datasets/
                CIFAR100/
                    meta.json
                    config.yaml
                    collate_fn.py
                    datasets.py
    jyp/
        project_1/
            project.json
            optimizations/
                optimize_1/
                    meta.json
                    __init__.py
                    optimize.py
            deployment/
            models/
                model_2/
                    meta.json
                    __init__.py
                    model.py
                    config.yaml
                model_1/
                    meta.json
                    __init__.py
                    model.py
                    config.yaml
            runs/
                run_1/
                    engine.py
                    logs/
                123/
                    engine.py
                    logs/
            pipelines/
            datasets/
                Cifar/
                    meta.json
                    __init__.py
                    config.yaml
                    collate_fn.py
                    datasets.py
                dataset_1/
                    meta.json
                    __init__.py
                    config.yaml
                    collate_fn.py
                    datasets.py
    None/
        1/
            models/
templates/
    datasets.html
    sign-up.html
    runs.html
    dashboard.html
    optimize.html
    sign-in.html
    jobs.html
    models.html
    base.html
static/
    favicon.ico
    ace/
        src-min/
            mode-objectivec.js
            theme-clouds.js
            mode-prisma.js
            mode-applescript.js
            mode-pig.js
            mode-redshift.js
            mode-typescript.js
            theme-sqlserver.js
            mode-c_cpp.js
            keybinding-vscode.js
            mode-haml.js
            mode-alda.js
            mode-gobstones.js
            mode-sjs.js
            mode-fsharp.js
            theme-merbivore_soft.js
            mode-smithy.js
            worker-html.js
            mode-puppet.js
            mode-yaml.js
            mode-sac.js
            theme-tomorrow_night_eighties.js
            theme-terminal.js
            mode-nix.js
            theme-cloud9_night_low_color.js
            mode-edifact.js
            mode-javascript.js
            mode-fortran.js
            mode-nsis.js
            ext-beautify.js
            ext-hardwrap.js
            mode-zeek.js
            theme-gruvbox_light_hard.js
            mode-velocity.js
            mode-abap.js
            theme-monokai.js
            worker-base.js
            mode-robot.js
            mode-logtalk.js
            mode-golang.js
            mode-stylus.js
            mode-pgsql.js
            theme-textmate.js
            theme-mono_industrial.js
            mode-python.js
            ext-statusbar.js
            theme-idle_fingers.js
            mode-coldfusion.js
            mode-textile.js
            keybinding-vim.js
            mode-java.js
            ext-static_highlight.js
            mode-jsx.js
            theme-one_dark.js
            mode-tcl.js
            mode-autohotkey.js
            mode-jssm.js
            ext-rtl.js
            mode-tex.js
            theme-tomorrow.js
            theme-gob.js
            mode-asl.js
            mode-haskell_cabal.js
            mode-coffee.js
            mode-svg.js
            mode-ocaml.js
            mode-plain_text.js
            mode-properties.js
            mode-gherkin.js
            mode-abc.js
            mode-php_laravel_blade.js
            mode-dart.js
            mode-clojure.js
            mode-swift.js
            mode-nim.js
            theme-clouds_midnight.js
            mode-partiql.js
            mode-lisp.js
            mode-r.js
            mode-jsp.js
            theme-cloud9_day.js
            ext-prompt.js
            mode-css.js
            ext-settings_menu.js
            theme-nord_dark.js
            mode-mixal.js
            ext-language_tools.js
            mode-ada.js
            mode-ion.js
            mode-pascal.js
            ext-whitespace.js
            mode-html_elixir.js
            mode-gcode.js
            mode-mediawiki.js
            mode-d.js
            mode-raku.js
            mode-cirru.js
            mode-toml.js
            mode-asciidoc.js
            mode-turtle.js
            mode-crystal.js
            ext-modelist.js
            mode-nunjucks.js
            mode-json5.js
            mode-handlebars.js
            mode-vhdl.js
            mode-lua.js
            mode-lucene.js
            theme-kuroir.js
            mode-wollok.js
            mode-markdown.js
            mode-apex.js
            mode-groovy.js
            mode-nginx.js
            ext-themelist.js
            mode-scad.js
            mode-luapage.js
            mode-mysql.js
            mode-sql.js
            theme-tomorrow_night_bright.js
            worker-yaml.js
            mode-fsl.js
            mode-rhtml.js
            mode-praat.js
            mode-sqlserver.js
            theme-eclipse.js
            theme-chrome.js
            ext-keybinding_menu.js
            theme-merbivore.js
            mode-scrypt.js
            theme-cobalt.js
            mode-eiffel.js
            worker-css.js
            ext-code_lens.js
            worker-xquery.js
            keybinding-emacs.js
            mode-tsx.js
            mode-prolog.js
            mode-django.js
            theme-pastel_on_dark.js
            mode-sh.js
            mode-ini.js
            mode-qml.js
            mode-html.js
            mode-jade.js
            theme-crimson_editor.js
            mode-haskell.js
            theme-gruvbox_dark_hard.js
            mode-jsoniq.js
            theme-tomorrow_night_blue.js
            mode-smarty.js
            mode-ftl.js
            mode-xquery.js
            theme-gruvbox.js
            theme-dreamweaver.js
            mode-elm.js
            mode-mips.js
            theme-tomorrow_night.js
            mode-scheme.js
            mode-cobol.js
            theme-xcode.js
            ext-elastic_tabstops_lite.js
            theme-dracula.js
            mode-red.js
            ext-error_marker.js
            mode-glsl.js
            theme-dawn.js
            ext-textarea.js
            mode-mask.js
            mode-dockerfile.js
            mode-diff.js
            mode-forth.js
            mode-razor.js
            mode-jack.js
            theme-iplastic.js
            mode-julia.js
            ext-emmet.js
            mode-matlab.js
            mode-latex.js
            mode-rust.js
            mode-liquid.js
            theme-cloud9_night.js
            mode-drools.js
            mode-csound_document.js
            mode-vala.js
            mode-php.js
            mode-ruby.js
            ext-options.js
            mode-less.js
            mode-makefile.js
            mode-kotlin.js
            mode-twig.js
            mode-csp.js
            mode-space.js
            theme-solarized_light.js
            mode-elixir.js
            theme-solarized_dark.js
            mode-mushcode.js
            mode-sparql.js
            mode-scala.js
            worker-javascript.js
            mode-sass.js
            mode-dot.js
            worker-php.js
            mode-mel.js
            mode-gitignore.js
            worker-xml.js
            mode-apache_conf.js
            mode-rst.js
            mode-io.js
            mode-perl.js
            mode-xml.js
            mode-haxe.js
            ext-linking.js
            mode-scss.js
            mode-latte.js
            mode-c9search.js
            mode-erlang.js
            ext-searchbox.js
            ace.js
            mode-verilog.js
            mode-actionscript.js
            mode-rdoc.js
            theme-twilight.js
            theme-vibrant_ink.js
            mode-lsl.js
            mode-vbscript.js
            worker-lua.js
            mode-visualforce.js
            mode-assembly_x86.js
            theme-katzenmilch.js
            theme-github.js
            worker-json.js
            mode-csound_score.js
            mode-maze.js
            mode-html_ruby.js
            mode-powershell.js
            theme-chaos.js
            mode-soy_template.js
            ext-spellcheck.js
            mode-slim.js
            mode-graphqlschema.js
            mode-curly.js
            mode-csound_orchestra.js
            mode-protobuf.js
            mode-aql.js
            theme-ambiance.js
            mode-csharp.js
            mode-terraform.js
            mode-snippets.js
            ext-split.js
            mode-json.js
            mode-hjson.js
            worker-coffee.js
            mode-livescript.js
            mode-batchfile.js
            theme-kr_theme.js
            mode-logiql.js
            mode-ejs.js
            mode-text.js
            keybinding-sublime.js
            snippets/
                gobstones.js
                tcl.js
                prolog.js
                red.js
                cirru.js
                dart.js
                xml.js
                makefile.js
                prisma.js
                haxe.js
                ruby.js
                sql.js
                smithy.js
                cobol.js
                ocaml.js
                sparql.js
                coldfusion.js
                matlab.js
                applescript.js
                latex.js
                haskell_cabal.js
                css.js
                ini.js
                rhtml.js
                ftl.js
                snippets.js
                logiql.js
                vbscript.js
                glsl.js
                qml.js
                erlang.js
                mixal.js
                vala.js
                xquery.js
                zeek.js
                json5.js
                plain_text.js
                slim.js
                eiffel.js
                csharp.js
                protobuf.js
                perl.js
                verilog.js
                nginx.js
                mysql.js
                ion.js
                c9search.js
                sqlserver.js
                autohotkey.js
                mask.js
                less.js
                properties.js
                nunjucks.js
                razor.js
                nix.js
                csound_document.js
                latte.js
                rust.js
                jack.js
                wollok.js
                handlebars.js
                praat.js
                fsl.js
                groovy.js
                raku.js
                golang.js
                smarty.js
                d.js
                html.js
                sass.js
                hjson.js
                django.js
                lucene.js
                pgsql.js
                scrypt.js
                csound_orchestra.js
                nim.js
                aql.js
                rst.js
                typescript.js
                alda.js
                gitignore.js
                jsoniq.js
                yaml.js
                sh.js
                forth.js
                curly.js
                haml.js
                maze.js
                lua.js
                io.js
                scheme.js
                mushcode.js
                actionscript.js
                puppet.js
                elm.js
                assembly_x86.js
                apache_conf.js
                asl.js
                scad.js
                fortran.js
                turtle.js
                python.js
                lisp.js
                vhdl.js
                liquid.js
                rdoc.js
                sac.js
                mel.js
                graphqlschema.js
                fsharp.js
                luapage.js
                dot.js
                stylus.js
                logtalk.js
                java.js
                terraform.js
                jsx.js
                soy_template.js
                kotlin.js
                textile.js
                abap.js
                crystal.js
                r.js
                php_laravel_blade.js
                mips.js
                velocity.js
                json.js
                powershell.js
                scss.js
                swift.js
                gcode.js
                jade.js
                robot.js
                livescript.js
                tsx.js
                visualforce.js
                sjs.js
                haskell.js
                diff.js
                html_elixir.js
                pig.js
                php.js
                toml.js
                csound_score.js
                apex.js
                c_cpp.js
                pascal.js
                csp.js
                nsis.js
                scala.js
                html_ruby.js
                javascript.js
                text.js
                mediawiki.js
                objectivec.js
                clojure.js
                jssm.js
                ada.js
                ejs.js
                coffee.js
                tex.js
                space.js
                lsl.js
                markdown.js
                twig.js
                partiql.js
                elixir.js
                gherkin.js
                svg.js
                batchfile.js
                abc.js
                drools.js
                redshift.js
                asciidoc.js
                edifact.js
                dockerfile.js
                julia.js
                jsp.js
    js/
        cytoscape-node-html-label.js
        cytoscape.min.js
        notify.js
        apexcharts.min.js
        jquery.cookie.min.js
        jquery.min.js
    images/
        logo.png
        ai.png
        graph.png
        logo.svg
    backup/
        tables.html
        widgets.html
        tasks.html
        sign-up.html
        dashboard.html
        sign-in.html
        jobs.html
        tinymce.html
        lists.html
        models.html
        dashboard2.html
    src/
        models.js
        datasets.js
        base.js
        jobs.js
        optimize.js
        runs.js
    dist/
        css/
            tabler.rtl.min.css
            demo.css
            tabler-payments.rtl.css
            tabler.min.css
            tabler.css
            demo.min.css
            tabler-vendors.min.css
            tabler-payments.css
            custom.css
            tabler-flags.rtl.css
            tabler-vendors.rtl.min.css
            tabler-vendors.rtl.css
            tabler-payments.rtl.min.css
            demo.rtl.css
            tabler-flags.rtl.min.css
            demo.rtl.min.css
            tabler-payments.min.css
            tabler.rtl.css
            tabler-flags.css
            tabler-vendors.css
            tabler-flags.min.css
        js/
            tabler.js
            tabler.esm.min.js
            demo.js
            tabler.esm.js
            demo.min.js
            tabler.min.js
        img/
            payments/
                mir-dark.svg
                neteller-dark.svg
                payone-dark.svg
                eway.svg
                payza.svg
                ingenico.svg
                bitcoin-dark.svg
                tpay.svg
                payoneer-dark.svg
                2checkout.svg
                applepay-dark.svg
                amazon.svg
                directdebit-dark.svg
                blik.svg
                dotpay.svg
                monero.svg
                paypal.svg
                solo.svg
                ukash-dark.svg
                solo-dark.svg
                bitcoin.svg
                stripe-dark.svg
                giropay.svg
                bancontact-dark.svg
                ebay-dark.svg
                verisign.svg
                square.svg
                sage.svg
                americanexpress.svg
                ogone.svg
                shopify-dark.svg
                przelewy24-dark.svg
                paysafecard-dark.svg
                ogone-dark.svg
                payoneer.svg
                verifone.svg
                maestro-dark.svg
                laser.svg
                switch-dark.svg
                americanexpress-dark.svg
                googlewallet-dark.svg
                ebay.svg
                amazon-dark.svg
                2checkout-dark.svg
                sepa-dark.svg
                eway-dark.svg
                clickandbuy.svg
                alipay.svg
                worldpay.svg
                visa.svg
                paybox.svg
                cirrus-dark.svg
                discover.svg
                bitpay.svg
                dwolla-dark.svg
                paybox-dark.svg
                square-dark.svg
                bancontact.svg
                paysafecard.svg
                klarna.svg
                monero-dark.svg
                mastercard-dark.svg
                bitpay-dark.svg
                mir.svg
                okpay-dark.svg
                ripple.svg
                directdebit.svg
                skrill.svg
                payza-dark.svg
                ripple-dark.svg
                visa-dark.svg
                dotpay-dark.svg
                dwolla.svg
                payu.svg
                neteller.svg
                payu-dark.svg
                alipay-dark.svg
                westernunion.svg
                paymill.svg
                verifone-dark.svg
                worldpay-dark.svg
                paypal-dark.svg
                sage-dark.svg
                dinersclub.svg
                stripe.svg
                clickandbuy-dark.svg
                okpay.svg
                tpay-dark.svg
                dinersclub-dark.svg
                switch.svg
                webmoney-dark.svg
                webmoney.svg
                westernunion-dark.svg
                verisign-dark.svg
                jcb.svg
                laser-dark.svg
                shopify.svg
                maestro.svg
                skrill-dark.svg
                applepay.svg
                sepa.svg
                giropay-dark.svg
                googlewallet.svg
                discover-dark.svg
                coinkite.svg
                klarna-dark.svg
                blik-dark.svg
                unionpay-dark.svg
                przelewy24.svg
                paymill-dark.svg
                coinkite-dark.svg
                ingenico-dark.svg
                cirrus.svg
                ukash.svg
                mastercard.svg
                payone.svg
                jcb-dark.svg
                unionpay.svg
            flags/
                tt.svg
                gr.svg
                bz.svg
                pe.svg
                ge.svg
                vu.svg
                lv.svg
                kr.svg
                bb.svg
                ms.svg
                bi.svg
                li.svg
                im.svg
                pk.svg
                ao.svg
                mt.svg
                us.svg
                id.svg
                au.svg
                hm.svg
                sk.svg
                ug.svg
                bm.svg
                cn.svg
                hn.svg
                gm.svg
                rw.svg
                mf.svg
                ax.svg
                ml.svg
                gu.svg
                gt.svg
                ci.svg
                ca.svg
                vg.svg
                mm.svg
                cm.svg
                bw.svg
                ss.svg
                um.svg
                so.svg
                sr.svg
                gp.svg
                kz.svg
                si.svg
                gb-wls.svg
                ae.svg
                af.svg
                om.svg
                ad.svg
                sd.svg
                re.svg
                mc.svg
                wf.svg
                sy.svg
                fk.svg
                eh.svg
                al.svg
                ly.svg
                sh.svg
                mp.svg
                pn.svg
                st.svg
                as.svg
                at.svg
                tl.svg
                to.svg
                rs.svg
                pa.svg
                br.svg
                es-ct.svg
                bo.svg
                gn.svg
                ai.svg
                mu.svg
                hr.svg
                in.svg
                sl.svg
                ni.svg
                ps.svg
                eu.svg
                mz.svg
                vn.svg
                bg.svg
                ke.svg
                za.svg
                cu.svg
                ve.svg
                fr.svg
                la.svg
                cg.svg
                ph.svg
                kw.svg
                gi.svg
                tn.svg
                bn.svg
                gb-nir.svg
                ck.svg
                tv.svg
                gb.svg
                tm.svg
                ga.svg
                sn.svg
                ua.svg
                gl.svg
                se.svg
                gq.svg
                je.svg
                gs.svg
                ru.svg
                pt.svg
                va.svg
                co.svg
                lc.svg
                pr.svg
                th.svg
                gy.svg
                zw.svg
                tz.svg
                lb.svg
                sz.svg
                tg.svg
                bf.svg
                kh.svg
                bh.svg
                mv.svg
                it.svg
                do.svg
                ir.svg
                na.svg
                hk.svg
                vc.svg
                yt.svg
                md.svg
                cf.svg
                iq.svg
                lt.svg
                mo.svg
                jp.svg
                az.svg
                de.svg
                aq.svg
                bj.svg
                cc.svg
                sx.svg
                cy.svg
                sg.svg
                cw.svg
                kn.svg
                hu.svg
                ro.svg
                sc.svg
                bv.svg
                by.svg
                gf.svg
                tw.svg
                tc.svg
                ws.svg
                pl.svg
                uy.svg
                gd.svg
                td.svg
                pw.svg
                am.svg
                es.svg
                gb-eng.svg
                gb-sct.svg
                km.svg
                be.svg
                bs.svg
                mk.svg
                tr.svg
                nr.svg
                sm.svg
                sa.svg
                dm.svg
                ec.svg
                pf.svg
                lk.svg
                lr.svg
                lu.svg
                zm.svg
                mx.svg
                er.svg
                un.svg
                py.svg
                sj.svg
                tf.svg
                nz.svg
                nf.svg
                mg.svg
                fj.svg
                dk.svg
                tj.svg
                bl.svg
                dz.svg
                mw.svg
                gw.svg
                cz.svg
                bt.svg
                cv.svg
                gh.svg
                bd.svg
                fi.svg
                sv.svg
                uz.svg
                jo.svg
                mr.svg
                pm.svg
                kp.svg
                nu.svg
                io.svg
                ht.svg
                ky.svg
                aw.svg
                mn.svg
                ls.svg
                cl.svg
                qa.svg
                sb.svg
                my.svg
                np.svg
                jm.svg
                is.svg
                ch.svg
                no.svg
                eg.svg
                ie.svg
                nl.svg
                vi.svg
                ar.svg
                bq.svg
                ne.svg
                et.svg
                mq.svg
                gg.svg
                mh.svg
                ye.svg
                ki.svg
                fo.svg
                il.svg
                cr.svg
                ng.svg
                nc.svg
                pg.svg
                cx.svg
                tk.svg
                cd.svg
                me.svg
                ag.svg
                ee.svg
                fm.svg
                kg.svg
                ma.svg
                dj.svg
                ba.svg
        libs/
            list.js/
                dist/
                    list.min.js
            nouislider/
                dist/
                    nouislider.min.js
            litepicker/
                dist/
                    litepicker.js
            bootstrap/
                dist/
                    js/
                        bootstrap.bundle.min.js
            countup.js/
                dist/
                    countUp.js
            apexcharts/
                dist/
                    apexcharts.min.js
            jsvectormap/
                dist/
                    maps/
                        world.js
                        world-merc.js
                    js/
                        jsvectormap.min.js
            tom-select/
                dist/
                    js/
                        tom-select.base.min.js
.temp/
    models.py
    experiments.py
    datasets.py
__pycache__/
    tasks.cpython-311.pyc
    project.cpython-311.pyc
    optimize.cpython-311.pyc
    dashboard.cpython-312.pyc
    jobs.cpython-311.pyc
    datasets.cpython-311.pyc
    conv_graph.cpython-311.pyc
    models.cpython-311.pyc
    experiments.cpython-311.pyc
    auth.cpython-311.pyc
    auth.cpython-312.pyc
    dashboard.cpython-311.pyc
    runs.cpython-311.pyc
    project.cpython-312.pyc
    app.cpython-311.pyc

=== ./models.py ===
import os
import json
import shutil
from flask import Blueprint, jsonify, request, session, render_template
from auth import session_required

models = Blueprint('models', __name__, url_prefix='/models')

@models.route('/')
@session_required
def root():
    return render_template('models.html')

# Load default model template files
@models.route('/load_template', methods=['GET'])
@session_required
def load_template():
    try:
        template_path = './edgeai/template/project/models/'
        
        # Read each template file
        with open(f'{template_path}/src/config.yaml') as f:
            config = f.read()
        with open(f'{template_path}/src/model.py') as f:
            model_code = f.read()
        
        # Return templates as JSON
        return jsonify({
            "config": config,
            "model": model_code
        })
    except Exception as e:
        return jsonify({"error": str(e)})

# Save a new model configuration and code to the user's workspace
@models.route('/save', methods=['POST'])
@session_required
def save_model():
    try:
        data = request.json
        model_name = data["meta"]["model_name"]
        project_name = data.get("project_name")
        
        if not project_name:
            raise ValueError("Project name is missing.")

        # Define user model path
        user_path = f'./workspace/{session["user"]}/{project_name}/models/{model_name}'
        os.makedirs(user_path, exist_ok=True)

        # Save meta.json
        with open(f"{user_path}/meta.json", "w") as f:
            json.dump(data["meta"], f, indent=4)

        # Save config.yaml
        with open(f"{user_path}/config.yaml", "w") as f:
            f.write(data["config"])

        # Save model.py
        with open(f"{user_path}/model.py", "w") as f:
            f.write(data["model"])


        # Create __init__.py to make it a Python package
        init_content = f"""from .model import * """
        with open(f"{user_path}/__init__.py", "w") as f:
            f.write(init_content)


        # Update project.json
        project_json_path = f'./workspace/{session["user"]}/{project_name}/project.json'
        if os.path.exists(project_json_path):
            with open(project_json_path, 'r') as f:
                project_data = json.load(f)
        else:
            project_data = {"datasets": [], "models": [], "experiments": [], "optimizations": [], }

        existing_models = project_data.get("models", [])
        
        if not any(m["model_name"] == data["meta"]["model_name"] for m in existing_models):
            # project_data.setdefault("models", []).append(data["meta"])
            model_meta = data["meta"].copy()
            model_meta["model_save_path"] = user_path
            project_data["models"].append(model_meta)

        with open(project_json_path, 'w') as f:
            json.dump(project_data, f, indent=4)

        return jsonify({"message": "Model saved successfully"})
    except Exception as e:
        return jsonify({"error": str(e)})

# List all models for the current user
@models.route('/list', methods=['POST'])
@session_required
def list_models():
    try:
        project_name = request.json.get("project_name")
        if not project_name:
            raise ValueError("Project name is missing.")

        project_json_path = f'./workspace/{session["user"]}/{project_name}/project.json'
        
        # Load model information from project.json
        if os.path.exists(project_json_path):
            with open(project_json_path, 'r') as f:
                project_data = json.load(f)
                models = project_data.get("models", [])
        else:
            models = []

        # Return the model metadata
        return jsonify({"models": models})
    except Exception as e:
        return jsonify({"error": str(e)})

# Delete a specific model
@models.route('/delete', methods=['POST'])
@session_required
def delete_model():
    try:
        model_name = request.json['name']
        project_name = request.json.get("project_name")
        if not project_name:
            raise ValueError("Project name is missing.")

        user_path = f'./workspace/{session["user"]}/{project_name}/models/{model_name}'
        
        # Remove the model directory
        if os.path.exists(user_path):
            shutil.rmtree(user_path)

        # Update project.json
        project_json_path = f'./workspace/{session["user"]}/{project_name}/project.json'
        if os.path.exists(project_json_path):
            with open(project_json_path, 'r') as f:
                project_data = json.load(f)

            project_data["models"] = [m for m in project_data.get("models", []) if m["model_name"] != model_name]

            with open(project_json_path, 'w') as f:
                json.dump(project_data, f, indent=4)
        
        return jsonify({"message": f"Model '{model_name}' deleted successfully"})
    except Exception as e:
        return jsonify({"error": str(e)})

# Delete all models for a specific project
@models.route('/delete_all', methods=['POST'])
@session_required
def delete_all_models():
    try:
        project_name = request.json.get("project_name")
        if not project_name:
            raise ValueError("Project name is missing.")

        user_path = f'./workspace/{session["user"]}/{project_name}/models'
        
        # Remove all model directories for the project
        if os.path.exists(user_path):
            shutil.rmtree(user_path)

        # Update project.json
        project_json_path = f'./workspace/{session["user"]}/{project_name}/project.json'
        if os.path.exists(project_json_path):
            with open(project_json_path, 'r') as f:
                project_data = json.load(f)

            project_data["models"] = []

            with open(project_json_path, 'w') as f:
                json.dump(project_data, f, indent=4)
        
        return jsonify({"message": f"All models for project '{project_name}' deleted successfully"})
    except Exception as e:
        return jsonify({"error": str(e)})

=== ./repo2code.py ===
import os

# File paths
home_folder = "./"
output_file = os.path.join(home_folder, "repo2output.txt")

def write_tree_to_file():
    with open(output_file, "w") as f:
        for root, dirs, files in os.walk(home_folder):
            # Write the tree structure to file
            depth = root.replace(home_folder, '').count(os.sep)
            indent = '    ' * depth
            f.write(f"{indent}{os.path.basename(root)}/\n")
            subindent = '    ' * (depth + 1)
            for file in files:
                f.write(f"{subindent}{file}\n")

def append_files_by_pattern(folder, pattern):
    with open(output_file, "a") as f:
        for file_name in os.listdir(folder):
            if file_name.endswith(pattern):
                file_path = os.path.join(folder, file_name)
                f.write(f"\n=== {file_path} ===\n")
                with open(file_path, "r") as file:
                    f.write(file.read())

# Step 1: Write the tree structure to file
write_tree_to_file()

# Step 2: Append Python files in the home folder
append_files_by_pattern(home_folder, ".py")

# Step 3: Append HTML files in the ./templates/ folder
templates_folder = os.path.join(home_folder, "templates")
if os.path.exists(templates_folder):
    append_files_by_pattern(templates_folder, ".html")

# Step 4: Append JavaScript files in the ./static/src/ folder
static_src_folder = os.path.join(home_folder, "static", "src")
if os.path.exists(static_src_folder):
    append_files_by_pattern(static_src_folder, ".js")

=== ./runs.py ===
import os
import json
import shutil
import subprocess
import time
from flask import Blueprint, jsonify, request, session, render_template, Response, send_from_directory
from auth import session_required
import torch
from threading import Lock
import yaml
from flask import stream_with_context

runs = Blueprint('runs', __name__, url_prefix='/runs')

class GPUManager:
    def __init__(self):
        self.lock = Lock()
        self.gpu_status = {i: False for i in range(torch.cuda.device_count())}
    
    def allocate_gpus(self, num_gpus=1):
        """
        Allocate a specified number of GPUs.
        Returns a list of allocated GPU IDs or None if not enough GPUs are available.
        """
        with self.lock:
            available = [gpu_id for gpu_id, in_use in self.gpu_status.items() if not in_use]
            if len(available) >= num_gpus:
                allocated = available[:num_gpus]
                for gpu_id in allocated:
                    self.gpu_status[gpu_id] = True
                return allocated
            else:
                return None
    
    def release_gpus(self, gpu_ids):
        """
        Release the specified GPUs.
        """
        with self.lock:
            for gpu_id in gpu_ids:
                if gpu_id in self.gpu_status:
                    self.gpu_status[gpu_id] = False

gpu_manager = GPUManager()

def update_project_json(user, project_name, run_metadata):
    """
    Updates the project.json file with the new run metadata.
    """
    workspace_dir = os.path.join('workspace', user, project_name)
    project_json_path = os.path.join(workspace_dir, 'project.json')
    
    if not os.path.exists(project_json_path):
        project_data = {"runs": []}
    else:
        with open(project_json_path, 'r') as f:
            project_data = json.load(f)
    
    project_data["runs"].append(run_metadata)
    
    with open(project_json_path, 'w') as f:
        json.dump(project_data, f, indent=4)

@runs.route('/get_file', methods=['GET'])
@session_required
def get_file():
    try:
        project_name = request.args.get("project_name")
        run_name = request.args.get("run_name")
        file = request.args.get("file")

        if not project_name or not run_name or not file:
            return jsonify({"error": "Missing parameters."}), 400

        if file not in ['engine.py', 'config.yaml']:
            return jsonify({"error": "Invalid file requested."}), 400

        user = session["user"]
        file_path = os.path.join('workspace', user, project_name, 'runs', run_name, file)

        if not os.path.exists(file_path):
            return jsonify({"error": f"File '{file}' not found for run '{run_name}'."}), 404

        with open(file_path, 'r') as f:
            content = f.read()

        return jsonify({"content": content}), 200

    except Exception as e:
        return jsonify({"error": str(e)}), 500


@runs.route('/')
@session_required
def root():
    gpu_count = torch.cuda.device_count()
    return render_template('runs.html', gpu_count=gpu_count)

# Load template files: import.txt and engine.txt
@runs.route('/get_template', methods=['GET'])
@session_required
def get_template():
    try:
        file = request.args.get('file')
        if file not in ['import.txt', 'engine.txt']:
            return jsonify({"error": "Invalid template file requested."}), 400
        
        template_dir = os.path.join('edgeai', 'template', 'project', 'runs')  # Adjust path as needed
        file_path = os.path.join(template_dir, file)
        
        if not os.path.exists(file_path):
            return jsonify({"error": f"Template file '{file}' not found."}), 404
        
        return send_from_directory(template_dir, file)
    
    except Exception as e:
        return jsonify({"error": str(e)}), 500

@runs.route('/create', methods=['POST'])
@session_required
def create_run():
    try:
        data = request.get_json()
        project_name = data.get("project_name")
        run_name = data['run_name']
        model_name = data['model_name']
        dataset_name = data['dataset_name']
        optimization_name = data.get('optimization_name', '')
        misc = data.get('misc', {})
        engine_py_content = data['engine_py']
        config_yaml_content = data['config_yaml']
        num_gpus = data.get('num_gpus', 1)  # Number of GPUs to allocate when starting the run

        user = session["user"]
        workspace_dir = os.path.join('workspace', user, project_name)
        runs_dir = os.path.join(workspace_dir, 'runs', run_name)

        if os.path.exists(runs_dir):
            return jsonify({"error": f"Run '{run_name}' already exists."}), 400

        os.makedirs(runs_dir, exist_ok=True)
        os.makedirs(os.path.join(runs_dir, 'logs'), exist_ok=True)

        # Save engine.py content provided by the user
        engine_py_path = os.path.join(runs_dir, 'engine.py')
        with open(engine_py_path, 'w') as f:
            f.write(engine_py_content)

        # Save config.yaml content if provided
        if config_yaml_content:
            config_yaml_path = os.path.join(runs_dir, 'config.yaml')
            with open(config_yaml_path, 'w') as f:
                f.write(config_yaml_content)

        # Prepare run metadata without starting the process
        run_metadata = {
            "run_name": run_name,
            "created_date": time.strftime("%Y-%m-%dT%H:%M:%SZ", time.gmtime()),
            "model_name": model_name,
            "dataset_name": dataset_name,
            "optimization_name": optimization_name,
            "status": "Not Running",
            "gpu_ids": [],
            "pid": None,
            "num_gpus": num_gpus
        }

        # Update project.json
        update_project_json(user, project_name, run_metadata)

        return jsonify({"message": "Run created successfully. Start the run when ready."}), 201

    except Exception as e:
        return jsonify({"error": str(e)}), 500

# List all runs
@runs.route('/list', methods=['POST'])
@session_required
def list_runs():
    try:
        data = request.get_json()
        project_name = data.get("project_name")
        
        if not project_name:
            raise ValueError("Project name is missing.")

        user = session["user"]
        project_json_path = os.path.join('workspace', user, project_name, 'project.json')

        if not os.path.exists(project_json_path):
            return jsonify({"error": "Project not found."}), 404

        with open(project_json_path, 'r') as f:
            project_data = json.load(f)
            runs = project_data.get("runs", [])

        if not runs:
            return jsonify({"error": "No runs found for the project."}), 404

        return jsonify({"runs": runs}), 200

    except Exception as e:
        # Add detailed logging for debugging purposes
        print(f"Error in list_runs: {str(e)}")
        return jsonify({"error": str(e)}), 500

@runs.route('/start', methods=['POST'])
@session_required
def start_run():
    try:
        data = request.get_json()
        project_name = data.get("project_name")
        run_name = data.get("run_name")
        if not project_name or not run_name:
            raise ValueError("Project name or run name is missing.")

        user = session["user"]
        workspace_dir = os.path.join('workspace', user, project_name)
        runs_dir = os.path.join(workspace_dir, 'runs', run_name)
        log_file_path = os.path.join(runs_dir, 'logs', 'run.log')

        config_yaml_path = os.path.join(runs_dir, 'config.yaml')
        engine_py_path = os.path.join(runs_dir, 'engine.py')

        if not os.path.exists(engine_py_path):
            return jsonify({"error": f"engine.py not found for run '{run_name}'"}), 400

        # Read run metadata from project.json
        project_json_path = os.path.join(workspace_dir, 'project.json')
        if not os.path.exists(project_json_path):
            return jsonify({"error": "Project not found."}), 404

        with open(project_json_path, 'r') as f:
            project_data = json.load(f)

        run = next((r for r in project_data.get("runs", []) if r["run_name"] == run_name), None)
        if not run:
            return jsonify({"error": f"Run '{run_name}' not found."}), 404

        if run["status"] == "Running":
            return jsonify({"error": f"Run '{run_name}' is already running."}), 400

        # Allocate GPUs based on run's num_gpus
        num_gpus = run.get('num_gpus', 1)
        gpu_ids = gpu_manager.allocate_gpus(num_gpus)
        if gpu_ids is None:
            available_gpus = sum(not in_use for in_use in gpu_manager.gpu_status.values())
            return jsonify({"error": f"Requested {num_gpus} GPUs, but only {available_gpus} available."}), 503

        # Set environment variable for CUDA_VISIBLE_DEVICES
        env = os.environ.copy()
        env['CUDA_VISIBLE_DEVICES'] = ','.join(map(str, gpu_ids))

        # Start the training process as a subprocess, redirecting output to run.log
        with open(log_file_path, 'a') as log_file:
            process = subprocess.Popen(
                ['python', 'engine.py'],
                cwd=runs_dir,
                stdout=log_file,
                stderr=subprocess.STDOUT,
                env=env
            )

        # Update the run's PID and GPU allocation in project.json
        run["pid"] = process.pid
        run["status"] = "Running"
        run["gpu_ids"] = gpu_ids

        with open(project_json_path, 'w') as f:
            json.dump(project_data, f, indent=4)

        return jsonify({"message": f"Run '{run_name}' started successfully.", "pid": process.pid, "gpu_ids": gpu_ids}), 200

    except Exception as e:
        return jsonify({"error": str(e)}), 500

@runs.route('/stop', methods=['POST'])
@session_required
def stop_run():
    try:
        data = request.get_json()
        project_name = data.get("project_name")
        run_name = data.get("run_name")
        if not project_name or not run_name:
            raise ValueError("Project name or run name is missing.")

        user = session["user"]
        workspace_dir = os.path.join('workspace', user, project_name)
        project_json_path = os.path.join(workspace_dir, 'project.json')

        if not os.path.exists(project_json_path):
            return jsonify({"error": "Project not found."}), 404

        with open(project_json_path, 'r') as f:
            project_data = json.load(f)

        run = next((r for r in project_data.get("runs", []) if r["run_name"] == run_name), None)
        if not run:
            return jsonify({"error": f"Run '{run_name}' not found."}), 404

        pid = run.get("pid")
        gpu_ids = run.get("gpu_ids", [])
        if not pid:
            return jsonify({"error": f"Run '{run_name}' is not running."}), 400

        # Terminate the process
        try:
            if os.name == 'nt':
                subprocess.call(['taskkill', '/F', '/PID', str(pid)])
            else:
                os.kill(pid, 9)
        except Exception as e:
            return jsonify({"error": f"Failed to terminate process with PID {pid}: {str(e)}"}), 500

        # Release the GPUs
        gpu_manager.release_gpus(gpu_ids)

        # Update run status
        run["pid"] = None
        run["status"] = "Stopped"
        run["gpu_ids"] = []

        # Save project.json
        with open(project_json_path, 'w') as f:
            json.dump(project_data, f, indent=4)

        return jsonify({"message": f"Run '{run_name}' stopped successfully."}), 200

    except Exception as e:
        return jsonify({"error": str(e)}), 500

# Get logs of a run using Server-Sent Events (SSE)
@runs.route('/logs', methods=['GET'])
@session_required
def logs_run():
    try:
        project_name = request.args.get("project_name")
        run_name = request.args.get("run_name")
        if not project_name or not run_name:
            raise ValueError("Project name or run name is missing.")

        user = session["user"]
        runs_dir = os.path.join('workspace', user, project_name, 'runs', run_name)
        log_file_path = os.path.join(runs_dir, 'logs', 'run.log')

        if not os.path.exists(log_file_path):
            return jsonify({"error": f"Log file for run '{run_name}' does not exist."}), 404

        def generate():
            with open(log_file_path, 'r') as f:
                # Move to the end of the file
                f.seek(0, os.SEEK_END)
                while True:
                    line = f.readline()
                    if line:
                        yield f"data: {line}\n\n"
                    else:
                        time.sleep(1)

        return Response(stream_with_context(generate()), mimetype='text/event-stream')

    except Exception as e:
        return jsonify({"error": str(e)}), 500

# Delete a run
@runs.route('/delete', methods=['POST'])
@session_required
def delete_run():
    try:
        data = request.get_json()
        project_name = data.get("project_name")
        run_name = data.get("run_name")
        if not project_name or not run_name:
            raise ValueError("Project name or run name is missing.")

        user = session["user"]
        workspace_dir = os.path.join('workspace', user, project_name)
        runs_dir = os.path.join(workspace_dir, 'runs', run_name)
        project_json_path = os.path.join(workspace_dir, 'project.json')

        # Check if run exists in project.json
        if not os.path.exists(project_json_path):
            return jsonify({"error": "Project not found."}), 404

        with open(project_json_path, 'r') as f:
            project_data = json.load(f)

        run = next((r for r in project_data.get("runs", []) if r["run_name"] == run_name), None)
        if not run:
            return jsonify({"error": f"Run '{run_name}' not found."}), 404

        # If the run is running, stop it first
        pid = run.get("pid")
        gpu_ids = run.get("gpu_ids", [])
        if pid:
            try:
                if os.name == 'nt':
                    subprocess.call(['taskkill', '/F', '/PID', str(pid)])
                else:
                    os.kill(pid, 9)
                run["pid"] = None
                run["status"] = "Stopped"
                gpu_manager.release_gpus(gpu_ids)
                run["gpu_ids"] = []
            except Exception as e:
                return jsonify({"error": f"Failed to terminate process with PID {pid}: {str(e)}"}), 500

        # Remove the run directory
        if os.path.exists(runs_dir):
            shutil.rmtree(runs_dir)

        # Remove run from project.json
        project_data["runs"] = [r for r in project_data.get("runs", []) if r["run_name"] != run_name]

        with open(project_json_path, 'w') as f:
            json.dump(project_data, f, indent=4)

        return jsonify({"message": f"Run '{run_name}' deleted successfully"}), 200

    except Exception as e:
        return jsonify({"error": str(e)}), 500

# Edit a run
@runs.route('/edit', methods=['POST'])
@session_required
def edit_run():
    try:
        data = request.get_json()
        project_name = data.get("project_name")
        original_run_name = data.get("original_run_name")
        run_name = data.get("run_name")
        model_name = data.get("model_name")
        dataset_name = data.get("dataset_name")
        optimization_name = data.get("optimization_name")
        num_gpus = data.get("num_gpus", 1)
        misc = data.get("misc", {})
        engine_py_content = data.get("engine_py")
        config_yaml_content = data.get("config_yaml")

        if not all([project_name, original_run_name, run_name, model_name, dataset_name, optimization_name]):
            raise ValueError("Missing required fields.")

        user = session["user"]
        workspace_dir = os.path.join('workspace', user, project_name)
        runs_dir = os.path.join(workspace_dir, 'runs', original_run_name)

        if not os.path.exists(runs_dir):
            return jsonify({"error": f"Run '{original_run_name}' does not exist."}), 404

        project_json_path = os.path.join(workspace_dir, 'project.json')
        if not os.path.exists(project_json_path):
            return jsonify({"error": "Project not found."}), 404

        with open(project_json_path, 'r') as f:
            project_data = json.load(f)

        # Find the run
        run = next((r for r in project_data.get("runs", []) if r["run_name"] == original_run_name), None)
        if not run:
            return jsonify({"error": f"Run '{original_run_name}' not found."}), 404

        # If run name is changed, rename the directory
        if original_run_name != run_name:
            new_runs_dir = os.path.join(workspace_dir, 'runs', run_name)
            if os.path.exists(new_runs_dir):
                return jsonify({"error": f"Run name '{run_name}' already exists."}), 400
            os.rename(runs_dir, new_runs_dir)
            run["run_name"] = run_name
            run["engine_path"] = os.path.abspath(os.path.join(new_runs_dir, 'engine.py'))
            run["status"] = "Not Running"
            run["gpu_ids"] = []
            runs_dir = new_runs_dir  # Update runs_dir

        # Update other run details
        run["model_name"] = model_name
        run["dataset_name"] = dataset_name
        run["optimization_name"] = optimization_name
        run["num_gpus"] = num_gpus
        run["misc"] = misc

        # Save updated engine.py
        engine_py_path = os.path.join(runs_dir, 'engine.py')
        with open(engine_py_path, 'w') as f:
            f.write(engine_py_content)

        # Save updated config.yaml if provided
        if config_yaml_content:
            config_yaml_path = os.path.join(runs_dir, 'config.yaml')
            with open(config_yaml_path, 'w') as f:
                f.write(config_yaml_content)

        # If the run is running, stop it before applying changes
        if run["status"] == "Running":
            pid = run.get("pid")
            gpu_ids = run.get("gpu_ids", [])
            if pid:
                try:
                    if os.name == 'nt':
                        subprocess.call(['taskkill', '/F', '/PID', str(pid)])
                    else:
                        os.kill(pid, 9)
                    run["pid"] = None
                    run["status"] = "Stopped"
                    gpu_manager.release_gpus(gpu_ids)
                    run["gpu_ids"] = []
                except Exception as e:
                    return jsonify({"error": f"Failed to terminate process with PID {pid}: {str(e)}"}), 500

        # Save project.json
        with open(project_json_path, 'w') as f:
            json.dump(project_data, f, indent=4)

        return jsonify({"message": f"Run '{run_name}' updated successfully."}), 200

    except Exception as e:
        return jsonify({"error": str(e)}), 500

=== ./dashboard.py ===
import os
import shutil
import psutil
import GPUtil

from flask import Blueprint, render_template, send_from_directory, jsonify, request, session
from auth import login_required, session_required
import re

dashboard = Blueprint('dashboard', __name__)


@dashboard.route('/')
@login_required
def root():
    cpu = psutil.cpu_percent()
    cpu_mem = psutil.virtual_memory()[2]
    gpus = [ [g.load, "%.4f" % (100*g.memoryUsed/g.memoryTotal)] for g in GPUtil.getGPUs() ]
    num_gpus = len(gpus)
    return render_template('dashboard.html', cpu=cpu, cpu_mem=cpu_mem, gpus=gpus, num_gpus=num_gpus)

=== ./project.py ===
import os
import shutil
import re
import json
from flask import Blueprint, jsonify, request, session
from auth import session_required

# Define Blueprint
project = Blueprint('project', __name__)

# Regex pattern for valid project names (alphanumeric, underscore, or hyphen)
VALID_PROJECT_NAME_PATTERN = r"^[A-Za-z0-9_-]+$"

# Create a new project
@project.route('/create', methods=['POST'])
@session_required
def create_project():
    msg = {'err': None, 'res': {}}
    try:
        project_name = request.json.get('project_name', '')
        if not re.match(VALID_PROJECT_NAME_PATTERN, project_name):
            msg['err'] = 'Invalid project name. Use only letters, numbers, hyphens, and underscores.'
            return jsonify(msg)

        user_workspace = f'./workspace/{session["user"]}'
        project_directory = os.path.join(user_workspace, project_name)

        # Check if project already exists
        if os.path.exists(project_directory):
            msg['err'] = 'Project already exists.'
            return jsonify(msg)

        # Copy template project structure
        shutil.copytree('./edgeai/template/blank_project/', project_directory)
        msg['res'] = f'Project "{project_name}" created successfully.'

    except Exception as e:
        msg['err'] = f'Error creating project: {str(e)}'

    return jsonify(msg)

@project.route('/json', methods=['GET'])
@session_required
def get_project_json():
    try:
        project_name = session.get('project', None)
        if not project_name:
            return jsonify({'err': "No project selected.", 'res': {}})

        project_json_path = f'./workspace/{session["user"]}/{project_name}/project.json'

        if not os.path.exists(project_json_path):
            return jsonify({'err': "project.json not found.", 'res': {}})

        with open(project_json_path, 'r') as f:
            project_data = json.load(f)

        return jsonify({'err': None, 'res': project_data})
    except Exception as e:
        return jsonify({'err': f"Error reading project.json: {str(e)}", 'res': {}})



# Update project.json
@project.route('/update_project_json', methods=['POST'])
@session_required
def update_project_json():
    msg = {'err': None, 'res': {}}
    try:
        action = request.json.get('action')
        key = request.json.get('key')
        value = request.json.get('value')
        project_name = request.json.get('project_name')

        if not project_name:
            raise ValueError("Project name is required.")

        project_json_path = f'./workspace/{session["user"]}/{project_name}/project.json'

        # Load existing project.json
        with open(project_json_path, 'r') as f:
            project_data = json.load(f)

        # Perform the requested action
        if action == 'add':
            if key in project_data and value not in project_data[key]:
                project_data[key].append(value)
        elif action == 'remove':
            if key in project_data:
                project_data[key] = [item for item in project_data[key] if item != value]
        else:
            raise ValueError("Invalid action specified.")

        # Save updated project.json
        with open(project_json_path, 'w') as f:
            json.dump(project_data, f, indent=4)

        msg['res'] = "project.json updated successfully."

    except Exception as e:
        msg['err'] = f"Error updating project.json: {str(e)}"

    return jsonify(msg)

# List all projects for the user
@project.route('/list', methods=['POST'])
@session_required
def list_projects():
    msg = {'err': None, 'res': {}}
    try:
        user_workspace = f'./workspace/{session["user"]}'
        projects = sorted(os.listdir(user_workspace)) if os.path.exists(user_workspace) else []
        msg['res'] = {"projects": projects}
    except Exception as e:
        msg['err'] = f"Error listing projects: {str(e)}"
    return jsonify(msg)

# Set the current project
@project.route('/current_project', methods=['POST'])
@session_required
def set_current_project():
    msg = {'err': None, 'res': {}}
    try:
        project_name = request.json.get('project')
        if not project_name:
            msg['err'] = "Project name is required."
        else:
            session['project'] = project_name
            msg['res'] = f"Current project set to '{project_name}'."
    except Exception as e:
        msg['err'] = f"Error setting current project: {str(e)}"
    return jsonify(msg)

# Delete a project
@project.route('/delete', methods=['POST'])
@session_required
def delete_project():
    msg = {'err': None, 'res': {}}
    try:
        project_name = request.json.get('project_name')
        if not project_name:
            msg['err'] = "Project name is required."
            return jsonify(msg)

        project_directory = f'./workspace/{session["user"]}/{project_name}'
        if not os.path.exists(project_directory):
            msg['err'] = "Project does not exist."
            return jsonify(msg)

        shutil.rmtree(project_directory)
        msg['res'] = f"Project '{project_name}' deleted successfully."

    except Exception as e:
        msg['err'] = f"Error deleting project: {str(e)}"

    return jsonify(msg)

=== ./conv_graph.py ===
import json


# elements: [ // list of graph elements to start with
#     { // node a
#         data: {
#             id: "a",
#             label: '노드 이름 ABC',
#             color: "#f2f2f2",
#         }
#     },
#     { // node b
#         data: {
#             id: "b",
#             label: 'Node B',
#             color: "#a1a1a1",
#         },
#     },
#     { // node c
#         data: {
#             id: "c",
#             label: 'Node C',
#             color: "#888888",
#         },
#     },
#
#     { // edge ab
#         data: { id: 'ab', source: 'a', target: 'b' }
#     },
#     { // edge ac
#         data: { id: 'ac', source: 'a', target: 'c' }
#     },
# ],
def load_json(path):
    with open(path, 'r') as f:
        return json.load(f)


#     { // node a
#         data: {
#             id: "a",
#             label: '노드 이름 ABC',
#             color: "#f2f2f2",
#         }
#     },
def conv_graph(path):
    elements = []

    data = load_json(path)

    layers_ = {}

    # get nodes
    for layer in data['layers']:
        layers_[layer['name']] = layer  # for searching edges
        node = {
            "data": {
                "id": layer['name'],
                "classname": layer['classname'],
                "idx": layer['idx'],
            }
        }
        elements.append(node)

    # get edges
    for layer in data['layers']:
        for inbound in layer['inbound']:
            edge = {
                "data": {
                    "source": inbound[0],
                    "idx": layers_[inbound[0]]['idx'],
                    "target": layer['name'],
                    "label": 'x'.join(map(str, layers_[inbound[0]]['output_shape'][inbound[1]]))
                }
            }
            elements.append(edge)

            # check if it is output layer
            layers_[inbound[0]]['is_output'] = False


    # # find end nodes & add final node to it
    # # if node has no outbound, it is end node
    # for i, v in enumerate(layers_.values()):
    #
    #     if 'is_output' not in v:
    #         # add final node
    #         node = {
    #             "data": {
    #                 "id": f"output_{i}",
    #                 "classname": f"output_{i}",
    #                 "idx": 0
    #             }
    #         }
    #         elements.append(node)
    #
    #         # add edge to final node
    #         edge = {
    #             "data": {
    #                 "source": v['name'],
    #                 "target": node['data']['id'],
    #                 "label": 'x'.join(map(str, v['output_shape'][0]))
    #             }
    #         }
    #         elements.append(edge)



    # edge = {
    #     "data": {
    #         "source": node['data']['id'],
    #         "target": 'final',
    #         "label": 'x'.join(map(str, layers_[node['data']['id']]['output_shape'][0]))
    #     }
    # }
    # elements.append(edge)

    return elements
=== ./datasets.py ===
import os
import json
import shutil
from flask import Blueprint, jsonify, request, session, render_template
from auth import session_required

dataset = Blueprint('datasets', __name__, url_prefix='/datasets')

@dataset.route('/')
@session_required
def root():
    return render_template('datasets.html')

# Load default dataset template files
@dataset.route('/load_template', methods=['GET'])
@session_required
def load_template():
    try:
        template_path = './edgeai/template/project/datasets'
        
        # Read each template file
        with open(f'{template_path}/config.yaml') as f:
            config = f.read()
        with open(f'{template_path}/meta.json') as f:
            meta = json.load(f)
        with open(f'{template_path}/src/datasets.py') as f:
            dataset_code = f.read()
        with open(f'{template_path}/src/collate_fn.py') as f:
            collate_fn_code = f.read()
        
        # Return templates as JSON
        return jsonify({
            "config": config,
            "meta": meta,
            "dataset": dataset_code,
            "collate_fn": collate_fn_code
        })
    except Exception as e:
        return jsonify({"error": str(e)})

@dataset.route('/save', methods=['POST'])
@session_required
def save_dataset():
    try:
        data = request.json
        dataset_name = data["meta"]["dataset_name"]
        project_name = data.get("project_name")
        
        if not project_name:
            raise ValueError("Project name is missing.")

        # Define user dataset path
        user_path = os.path.join(
            '.', 'workspace', session["user"], project_name, 'datasets', dataset_name
        )
        os.makedirs(user_path, exist_ok=True)

        # Save meta.json
        with open(os.path.join(user_path, "meta.json"), "w") as f:
            json.dump(data["meta"], f, indent=4)

        # Save config.yaml
        with open(os.path.join(user_path, "config.yaml"), "w") as f:
            f.write(data["config"])

        # Save datasets.py
        with open(os.path.join(user_path, "datasets.py"), "w") as f:
            f.write(data["dataset"])

        # Save collate_fn.py
        with open(os.path.join(user_path, "collate_fn.py"), "w") as f:
            f.write(data["collate_fn"])
        
        # Create __init__.py to make it a Python package
        init_content = f"""from .model import * """
        with open(f"{user_path}/__init__.py", "w") as f:
            f.write(init_content)
        # Update project.json
        project_json_path = os.path.join(
            '.', 'workspace', session["user"], project_name, 'project.json'
        )
        if os.path.exists(project_json_path):
            with open(project_json_path, 'r') as f:
                project_data = json.load(f)
        else:
            project_data = {"datasets": [], "models": [], "experiments": [], "optimizations": [], "runs": []}

        existing_datasets = project_data.get("datasets", [])

        # Add dataset_code_path to meta
        data["meta"]["dataset_code_path"] = user_path

        # Check if dataset already exists
        dataset_exists = any(d["dataset_name"] == dataset_name for d in existing_datasets)
        if not dataset_exists:
            # Append new dataset
            project_data["datasets"].append(data["meta"])
        else:
            # Update existing dataset
            for idx, dataset in enumerate(existing_datasets):
                if dataset["dataset_name"] == dataset_name:
                    project_data["datasets"][idx] = data["meta"]
                    break

        # Save updated project.json
        with open(project_json_path, 'w') as f:
            json.dump(project_data, f, indent=4)

        return jsonify({"message": "Dataset saved successfully"})
    except Exception as e:
        print(f"Error in save_dataset: {e}")
        return jsonify({"error": str(e)})


# List all datasets for the current user
@dataset.route('/list', methods=['POST'])
@session_required
def list_datasets():
    try:
        project_name = request.json.get("project_name")
        if not project_name:
            raise ValueError("Project name is missing.")

        project_json_path = f'./workspace/{session["user"]}/{project_name}/project.json'
        
        # Load dataset information from project.json
        if os.path.exists(project_json_path):
            with open(project_json_path, 'r') as f:
                project_data = json.load(f)
                datasets = project_data.get("datasets", [])
        else:
            datasets = []

        # Return the dataset metadata
        return jsonify({"datasets": datasets})
    except Exception as e:
        return jsonify({"error": str(e)})
@dataset.route('/delete', methods=['POST'])
@session_required
def delete_dataset():
    try:
        dataset_name = request.json['name']
        project_name = request.json.get("project_name")
        if not project_name:
            raise ValueError("Project name is missing.")

        user_path = os.path.join(
            '.', 'workspace', session["user"], project_name, 'datasets', dataset_name
        )

        # Remove the dataset directory
        if os.path.exists(user_path):
            shutil.rmtree(user_path)
        else:
            print(f"Dataset directory does not exist: {user_path}")

        # Update project.json
        project_json_path = os.path.join(
            '.', 'workspace', session["user"], project_name, 'project.json'
        )
        if os.path.exists(project_json_path):
            with open(project_json_path, 'r') as f:
                project_data = json.load(f)
            # Remove the dataset from project.json
            project_data["datasets"] = [
                d for d in project_data.get("datasets", []) if d["dataset_name"] != dataset_name
            ]
            with open(project_json_path, 'w') as f:
                json.dump(project_data, f, indent=4)
        else:
            print(f"project.json does not exist at: {project_json_path}")

        return jsonify({"message": f"Dataset '{dataset_name}' deleted successfully"})
    except Exception as e:
        print(f"Error in delete_dataset: {e}")
        return jsonify({"error": str(e)})


# Delete all datasets for a specific project
@dataset.route('/delete_all', methods=['POST'])
@session_required
def delete_all_datasets():
    try:
        project_name = request.json.get("project_name")
        if not project_name:
            raise ValueError("Project name is missing.")

        user_path = f'./workspace/{session["user"]}/{project_name}/datasets'
        
        # Remove all dataset directories for the project
        if os.path.exists(user_path):
            shutil.rmtree(user_path)

        # Update project.json
        project_json_path = f'./workspace/{session["user"]}/{project_name}/project.json'
        if os.path.exists(project_json_path):
            with open(project_json_path, 'r') as f:
                project_data = json.load(f)

            project_data["datasets"] = []

            with open(project_json_path, 'w') as f:
                json.dump(project_data, f, indent=4)
        
        return jsonify({"message": f"All datasets for project '{project_name}' deleted successfully"})
    except Exception as e:
        return jsonify({"error": str(e)})

=== ./auth.py ===
import json
import os
import shutil

from flask import Blueprint, render_template, request, redirect, url_for, flash, session, jsonify
import functools

auth = Blueprint('auth', __name__)

db_users = {}

path = "edgeai/users/users.json"
if os.path.exists(path):
    with open(path, 'r') as f:
        db_users = json.load(f)


def login_required(func):
    @functools.wraps(func)
    def check_session(*args, **kwargs):
        if "user" not in session:
            return render_template('sign-in.html')
        return func(*args, **kwargs)

    return check_session


def session_required(func):
    @functools.wraps(func)
    def check_session(*args, **kwargs):
        if "user" not in session:
            msg = {
                'err': "no session",
                'res': {}
            }
            return jsonify(msg)
        return func(*args, **kwargs)

    return check_session


@auth.route('/signin', methods=['POST'])
def signin():
    try:
        user = request.form.get('user')
        password = request.form.get('password')

        if user not in db_users:
            flash('user not found')
            return render_template('sign-in.html', user=user)

        if db_users[user] != password:
            flash('password is wrong')
            return render_template('sign-in.html', user=user)

        session['user'] = user

    except Exception as e:
        flash(e)

    return redirect(url_for('root'))


@auth.route('/signup')
def signup():
    if "user" in session:
        return redirect(url_for('root'))

    return render_template('sign-up.html')


@auth.route('/signup', methods=['POST'])
def signup_post():
    # code to validate and add user to database goes here
    user = request.form.get('user')
    password1 = request.form.get('password1')
    password2 = request.form.get('password2')

    # 이미 등록된 사용자 => 사용자 등록 다시 시도
    # json: error message => retry signup
    if user in db_users:
        flash('user already exists')
        return render_template('sign-up.html', user=user)

    if password1 != password2:
        flash('passwords do not match')
        return render_template('sign-up.html', user=user)

    # 사용자 생성
    # password hash (+salt, ...)
    pwhash = password1

    # add the new user to the database
    db_users[user] = pwhash

    # 로그인 처리
    session['user'] = user

    with open(path, 'w') as f:
        f.write(json.dumps(db_users, indent=4))

    # create default project directory
    shutil.copytree('./edgeai/template/project', f'./edgeai/users/{user}/default')

    return redirect(url_for('root'))


@auth.route('/logout', methods=['POST'])
@login_required
def logout():
    msg = {
        'err': None,
        'res': {}
    }

    try:
        session.pop('user', None)
        # session.clear()

    except Exception as e:
        msg['err'] = str(e)

    return jsonify(msg)

=== ./optimize.py ===
import os
import json
import shutil
from flask import Blueprint, jsonify, request, session, render_template
from auth import session_required

optimizations = Blueprint('optimizations', __name__, url_prefix='/optimizations')

@optimizations.route('/')
@session_required
def root():
    return render_template('optimize.html')

# Load list of optimization templates
@optimizations.route('/templates', methods=['GET'])
@session_required
def get_templates():
    try:
        template_path = './edgeai/template/project/optimizations/'
        print(f"Looking for templates in: {template_path}")
        if not os.path.exists(template_path):
            print(f"Templates directory does not exist: {template_path}")
            return jsonify({"templates": []})
        templates = [f for f in os.listdir(template_path) if f.endswith('.py')]
        print(f"Found templates: {templates}")
        return jsonify({"templates": templates})
    except Exception as e:
        print(f"Error in get_templates: {e}")
        return jsonify({"error": str(e)})

# Load specific template content
@optimizations.route('/load_template', methods=['POST'])
@session_required
def load_template():
    try:
        data = request.json
        template_file = data.get('template_file')
        if not template_file:
            raise ValueError("Template file name is missing.")

        template_path = os.path.join('./edgeai/template/project/optimizations/', template_file)
        if not os.path.exists(template_path):
            raise FileNotFoundError(f"Template file '{template_file}' not found.")

        with open(template_path, 'r') as f:
            template_content = f.read()

        print(f"Loaded template content for {template_file}")

        return jsonify({"template_content": template_content})
    except Exception as e:
        print(f"Error in load_template: {e}")
        return jsonify({"error": str(e)})

# Save a new optimization
@optimizations.route('/save', methods=['POST'])
@session_required
def save_optimization():
    try:
        data = request.json
        print(f"Received data for saving optimization: {data}")
        original_model_name = data['original_model_name']
        optimize_method_name = data['optimize_method_name']
        optimization_code = data['optimization_code']
        project_name = data.get('project_name')

        if not project_name:
            raise ValueError("Project name is missing.")

        # Define user optimization path
        user_path = os.path.join(
            '.', 'workspace', session["user"], project_name, 'optimizations', optimize_method_name
        )
        os.makedirs(user_path, exist_ok=True)

        # Create __init__.py to make it a Python package
        init_content = f"""from .model import * """
        with open(f"{user_path}/__init__.py", "w") as f:
            f.write(init_content)

        # Save optimize.py
        optimize_py_path = os.path.join(user_path, "optimize.py")
        with open(optimize_py_path, "w") as f:
            f.write(optimization_code)

        # Save meta.json
        meta = {
            "original_model_name": original_model_name,
            "optimize_method_name": optimize_method_name,
            "optimization_code_path": user_path,  # Include the path to the optimization code
            "misc": data.get('misc', '')
        }
        with open(os.path.join(user_path, "meta.json"), "w") as f:
            json.dump(meta, f, indent=4)

        # Update project.json
        project_json_path = os.path.join(
            '.', 'workspace', session["user"], project_name, 'project.json'
        )
        if os.path.exists(project_json_path):
            with open(project_json_path, 'r') as f:
                project_data = json.load(f)
        else:
            project_data = {"datasets": [], "models": [], "experiments": [], "optimizations": [], "runs": []}

        existing_optimizations = project_data.get("optimizations", [])

        # Check if optimization already exists
        optimization_exists = any(o["optimize_method_name"] == optimize_method_name for o in existing_optimizations)
        if not optimization_exists:
            # Append new optimization
            project_data["optimizations"].append(meta)
        else:
            # Update existing optimization
            for idx, optimization in enumerate(existing_optimizations):
                if optimization["optimize_method_name"] == optimize_method_name:
                    project_data["optimizations"][idx] = meta
                    break

        # Save updated project.json
        with open(project_json_path, 'w') as f:
            json.dump(project_data, f, indent=4)

        print(f"Optimization '{optimize_method_name}' saved successfully.")

        return jsonify({"message": "Optimization saved successfully"})
    except Exception as e:
        print(f"Error in save_optimization: {e}")
        return jsonify({"error": str(e)})

# List all optimizations for the current user
@optimizations.route('/list', methods=['POST'])
@session_required
def list_optimizations():
    try:
        project_name = request.json.get("project_name")
        if not project_name:
            raise ValueError("Project name is missing.")

        project_json_path = f'./workspace/{session["user"]}/{project_name}/project.json'

        # Load optimization information from project.json
        if os.path.exists(project_json_path):
            with open(project_json_path, 'r') as f:
                project_data = json.load(f)
                optimizations = project_data.get("optimizations", [])
        else:
            optimizations = []

        print(f"Loaded optimizations: {optimizations}")

        # Return the optimization metadata
        return jsonify({"optimizations": optimizations})
    except Exception as e:
        print(f"Error in list_optimizations: {e}")
        return jsonify({"error": str(e)})

# Delete a specific optimization
@optimizations.route('/delete', methods=['POST'])
@session_required
def delete_optimization():
    try:
        optimize_method_name = request.json['optimize_method_name']
        project_name = request.json.get("project_name")
        if not project_name:
            raise ValueError("Project name is missing.")

        user_path = f'./workspace/{session["user"]}/{project_name}/optimizations/{optimize_method_name}'

        # Remove the optimization directory
        if os.path.exists(user_path):
            shutil.rmtree(user_path)
            print(f"Deleted optimization directory: {user_path}")
        else:
            print(f"Optimization directory does not exist: {user_path}")

        # Update project.json
        project_json_path = f'./workspace/{session["user"]}/{project_name}/project.json'
        if os.path.exists(project_json_path):
            with open(project_json_path, 'r') as f:
                project_data = json.load(f)

            project_data["optimizations"] = [o for o in project_data.get("optimizations", []) if o["optimize_method_name"] != optimize_method_name]

            with open(project_json_path, 'w') as f:
                json.dump(project_data, f, indent=4)
            print(f"Updated project.json after deleting optimization '{optimize_method_name}'")
        else:
            print(f"project.json does not exist at: {project_json_path}")

        return jsonify({"message": f"Optimization '{optimize_method_name}' deleted successfully"})
    except Exception as e:
        print(f"Error in delete_optimization: {e}")
        return jsonify({"error": str(e)})

=== ./app.py ===
from flask import Flask, session, render_template, request, redirect, url_for, send_from_directory
from auth import auth, login_required
from project import project
from dashboard import dashboard
# from tasks import tasks
from models import models
from jobs import jobs
from runs import runs  # Import the new experiments blueprint
from datasets import dataset
from optimize import optimizations  # Correct the import to match the Blueprint name


app = Flask(__name__, static_url_path='/static')
app.register_blueprint(auth, url_prefix='/auth')

app.register_blueprint(project, url_prefix='/project')
app.register_blueprint(dataset, url_prefix='/datasets')
app.register_blueprint(models, url_prefix='/models')
app.register_blueprint(optimizations, url_prefix='/optimizations')
app.register_blueprint(runs, url_prefix='/runs')  # Register the experiments blueprint

app.register_blueprint(dashboard, url_prefix='/dashboard')

# app.register_blueprint(jobs, url_prefix='/jobs')

app.secret_key = 'SECRET_KEY_!!!'
app.config['SECRET_KEY'] = app.secret_key  # for debugging tool

@app.route('/')
@login_required
def root():
    return redirect(url_for('dashboard.root'))

@app.route('/<path:path>')
def static_proxy(path):
    return app.send_static_file(path)  # send_static_file will guess the correct MIME type

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5001)

=== ./jobs.py ===
import json
import os
import shutil
import subprocess
import datetime

from flask import Blueprint, render_template, send_from_directory, jsonify, request, session
from auth import login_required, session_required

jobs = Blueprint('jobs', __name__)


@jobs.route('/')
@login_required
def root():
    return render_template('jobs.html')


@jobs.route('/list', methods=['post'])
@session_required
def list():
    msg = {
        'err': None,
        'res': {}
    }

    try:
        path = f"./edgeai/users/{session['user']}/{request.json['project_name']}/jobs"
        dirs = sorted(os.listdir(path))
        for dir_ in dirs:
            msg['res'][dir_] = {}
            with open(f"{path}/{dir_}/meta.json", 'r') as f:
                msg['res'][dir_]['meta'] = json.loads(f.read())
            with open(f"{path}/{dir_}/progress.json", 'r') as f:
                msg['res'][dir_]['progress'] = json.loads(f.read())

            s_time = datetime.datetime.fromtimestamp(int(dir_) / 1000000)

            # 현재시간과 s_time의 차이를 구한다.
            # Calculate the difference between the current time and s_time.
            e_time = datetime.datetime.now() - s_time

            # e_time을 문자열로 변환한다. 초 단위 까지만 변환한다.
            # Convert e_time to a string. Only convert to the second unit.
            e_time = str(e_time).split('.')[0]
            msg['res'][dir_]['progress']['elapsed_time'] = str(e_time)

    except Exception as e:
        msg['err'] = str(e)

    return jsonify(msg)


@jobs.route('/cancel', methods=['post'])
@session_required
def cancel():
    msg = {
        'err': None,
        'res': {}
    }

    try:
        # it just kills the process
        # it doesn't check if the job is canceled successfully at this version
        path_pid = f"./edgeai/users/{session['user']}/{request.json['project_name']}/jobs/{request.json['job_name']}/pid"
        cmd = f'kill -9 `cat {path_pid}`'
        st, res = subprocess.getstatusoutput(cmd)
        if st != 0:
            msg['err'] = res
        else:
            msg['res'] = res

    except Exception as e:
        msg['err'] = str(e)

    return jsonify(msg)


@jobs.route('/delete', methods=['post'])
@session_required
def delete():
    msg = {
        'err': None,
        'res': {}
    }

    try:
        # it just kills the process
        # it doesn't check if the job is canceled successfully at this version
        path_pid = f"./edgeai/users/{session['user']}/{request.json['project_name']}/jobs/{request.json['job_name']}/pid"
        cmd = f'kill -9 `cat {path_pid}`'
        _, _ = subprocess.getstatusoutput(cmd)

        path = f"./edgeai/users/{session['user']}/{request.json['project_name']}/jobs/{request.json['job_name']}"
        shutil.rmtree(path)
    except Exception as e:
        msg['err'] = str(e)

    return jsonify(msg)


@jobs.route('/log', methods=['post'])
@session_required
def log():
    msg = {
        'err': None,
        'res': {}
    }

    try:
        path = f"./edgeai/users/{session['user']}/{request.json['project_name']}/jobs/{request.json['job_name']}/log.out"
        with open(path, 'r') as f:
            msg['res'] = f.read()

    except Exception as e:
        msg['err'] = str(e)

    return jsonify(msg)


@jobs.route('/graph', methods=['post'])
@session_required
def graph():
    msg = {
        'err': None,
        'res': {}
    }

    try:
        path = f"./edgeai/users/{session['user']}/{request.json['project_name']}/jobs/{request.json['job_name']}/values.json"
        with open(path, 'r') as f:
            msg['res'] = json.loads(f.read())

    except Exception as e:
        msg['err'] = str(e)

    return jsonify(msg)

=== ./templates/datasets.html ===
{% extends "base.html" %}

{% block content %}
<div class="page-wrapper">
    <div class="container-fluid py-4">
        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h3 class="card-title">Datasets</h3>
                <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#id_modal_create_dataset">Create Dataset</button>
            </div>
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead>
                        <tr>
                            <th>NAME</th>
                            <th>DATASET_PATH</th>
                            <th>SHAPE</th>
                            <th>MODE</th>
                            <th>ACTIONS</th>
                        </tr>
                        </thead>
                        <tbody id="id_table_body_datasets">
                        <!-- Dataset items will be dynamically populated here -->
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Create Dataset Modal -->
<div class="modal modal-blur fade" id="id_modal_create_dataset" tabindex="-1">
    <div class="modal-dialog modal-xl modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Create Dataset</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="row mb-3">
                    <div class="col-md-6">
                        <label class="form-label required">Dataset Name</label>
                        <input id="id_dataset_name" type="text" class="form-control" placeholder="Enter dataset name" autocomplete="off">
                    </div>
                    <div class="col-md-6">
                        <label class="form-label required">Dataset Path</label>
                        <input id="id_dataset_path" type="text" class="form-control" placeholder="Enter dataset path" autocomplete="off">
                    </div>
                </div>
                <div class="row mb-3">
                    <div class="col-md-6">
                        <label class="form-label required">Shape</label>
                        <input id="id_dataset_shape" type="text" class="form-control" placeholder="e.g., (224, 224, 3)" autocomplete="off">
                    </div>
                    <div class="col-md-6">
                        <label class="form-label required">Mode</label>
                        <select id="id_dataset_mode" class="form-select">
                            <option value="train">Train</option>
                            <option value="val">Validation</option>
                            <option value="test">Test</option>
                        </select>
                    </div>
                </div>
                <ul class="nav nav-tabs" role="tablist">
                    <li class="nav-item">
                        <a class="nav-link active" data-bs-toggle="tab" href="#tab_config_yaml" role="tab">config.yaml</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" data-bs-toggle="tab" href="#tab_dataset_py" role="tab">dataset.py</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" data-bs-toggle="tab" href="#tab_collate_fn_py" role="tab">collate_fn.py</a>
                    </li>
                </ul>
                <div class="tab-content mt-3">
                    <div class="tab-pane fade show active" id="tab_config_yaml" role="tabpanel">
                        <div id="editor_config_yaml" class="editor"></div>
                    </div>
                    <div class="tab-pane fade" id="tab_dataset_py" role="tabpanel">
                        <div id="editor_dataset_py" class="editor"></div>
                    </div>
                    <div class="tab-pane fade" id="tab_collate_fn_py" role="tabpanel">
                        <div id="editor_collate_fn_py" class="editor"></div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-link link-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="id_create_dataset_ok">Create Dataset</button>
            </div>
        </div>
    </div>
</div>

<!-- Notification Container -->
<div id="notification-container" class="position-fixed bottom-0 end-0 p-3" style="z-index: 1050"></div>

<script src="/static/src/datasets.js"></script>
{% endblock %}

=== ./templates/sign-up.html ===
<!doctype html>

<html lang="en">

<head>
	<meta charset="utf-8" />
	<meta name="viewport" content="width=device-width, initial-scale=1, viewport-fit=cover" />
	<meta http-equiv="X-UA-Compatible" content="ie=edge" />
	<title>Sign up</title>
	<link href="/static/dist/css/tabler.min.css" rel="stylesheet" />
</head>

<body>
	<div class="page page-center">
		<div class="container-tight py-4">
			<form class="card card-md" action="/auth/signup" method="post">
				<div class="card-body">
					<img class="mx-auto d-block" src="/static/images/logo.png" height="80" alt="">
					<p class="h1 text-center mb-3 mt-3">Sign up Edgifi</p>
					{% with messages = get_flashed_messages() %}
					{% if messages %}
					<div class="alert alert-warning" role="alert">{{ messages[0] }}</div>
					{% endif %}
					{% endwith %}
					<div class="mb-3">
						<label class="form-label">ID</label>
						<input name="user" type="text" class="form-control" value="{{ user }}" placeholder="Enter ID" autocomplete="off">
					</div>
					<div class="mb-3">
						<label class="form-label">Password</label>
						<div class="input-group input-group-flat">
							<input name="password1" type="password" class="form-control" placeholder="Password" autocomplete="off">
						</div>
					</div>
					<div class="mb-3">
						<label class="form-label">Confirm Password</label>
						<div class="input-group input-group-flat">
							<input name="password2" type="password" class="form-control" placeholder="Password" autocomplete="off">
						</div>
					</div>
					<div class="form-footer">
						<button type="submit" class="btn btn-primary w-100">Sign up</button>
					</div>
				</div>
			</form>
			<div class="text-center text-muted mt-3">
				Already have account? <a href="/" tabindex="-1">Sign in</a>
			</div>
		</div>
	</div>
</body>

</html>
=== ./templates/runs.html ===
{% extends 'base.html' %}
{% block content %}
<div class="page-wrapper">
    <div class="container-fluid py-4">
        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h3 class="card-title">Runs</h3>
                <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#id_modal_create_run">Create Run</button>
            </div>
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table">
                        <thead>
                            <tr>
                                <th>Run Name</th>
                                <th>Created Date</th>
                                <th>Model</th>
                                <th>Dataset</th>
                                <th>Optimization</th>
                                <th>Status</th>
                                <th>GPU(s)</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody id="id_table_body_runs">
                            <!-- Run rows will be dynamically populated here by runs.js -->
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Create Run Modal -->
<div class="modal fade" id="id_modal_create_run" tabindex="-1" aria-labelledby="createRunModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Create Run</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <!-- Form inputs -->
                <div class="row mb-3">
                    <div class="col-md-6">
                        <label class="form-label required">Run Name</label>
                        <input id="id_run_name" type="text" class="form-control" placeholder="Enter run name" autocomplete="off">
                    </div>
                    <div class="col-md-6">
                        <label class="form-label required">Number of GPUs</label>
                        <input id="id_num_gpus" type="number" class="form-control" min="1" max="{{ gpu_count }}" value="1">
                        <small class="form-text text-muted">Available GPUs: <span id="id_gpu_count">{{ gpu_count }}</span></small>
                    </div>
                </div>
                <div class="row mb-3">
                    <div class="col-md-4">
                        <label class="form-label required">Model</label>
                        <select id="id_select_model" class="form-select">
                            <option value="">Select a Model</option>
                            <!-- Options will be populated dynamically -->
                        </select>
                    </div>
                    <div class="col-md-4">
                        <label class="form-label required">Dataset</label>
                        <select id="id_select_dataset" class="form-select">
                            <option value="">Select a Dataset</option>
                            <!-- Options will be populated dynamically -->
                        </select>
                    </div>
                    <div class="col-md-4">
                        <label class="form-label required">Optimization</label>
                        <select id="id_select_optimization" class="form-select">
                            <option value="">Select an Optimization</option>
                            <!-- Options will be populated dynamically -->
                        </select>
                    </div>
                </div>

                <!-- Generate Engine Code Button -->
                <div class="mb-3">
                    <button id="id_generate_engine_code" type="button" class="btn btn-secondary" disabled>Generate Basic Engine Code</button>
                </div>

                <!-- Editor for engine.py -->
                <div class="editor" id="editor_engine_py"></div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-link" data-bs-dismiss="modal">Cancel</button>
                <button id="id_create_run_ok" type="button" class="btn btn-primary">Create Run</button>
            </div>
        </div>
    </div>
</div>
<!-- Edit Run Modal -->
<div class="modal fade" id="id_modal_edit_run" tabindex="-1" aria-labelledby="editRunModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Edit Run</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <!-- Form inputs -->
                <div class="row mb-3">
                    <div class="col-md-6">
                        <label class="form-label required">Run Name</label>
                        <input id="id_edit_run_name" type="text" class="form-control" placeholder="Enter run name" autocomplete="off">
                    </div>
                    <div class="col-md-6">
                        <label class="form-label required">Number of GPUs</label>
                        <input id="id_edit_num_gpus" type="number" class="form-control" min="1" max="{{ gpu_count }}" value="1">
                        <small class="form-text text-muted">Available GPUs: <span id="id_edit_gpu_count">{{ gpu_count }}</span></small>
                    </div>
                </div>
                <div class="row mb-3">
                    <div class="col-md-4">
                        <label class="form-label required">Model</label>
                        <p id="id_edit_model_name" class="form-control-plaintext">Model Name Placeholder</p>
                    </div>
                    <div class="col-md-4">
                        <label class="form-label required">Dataset</label>
                        <p id="id_edit_dataset_name" class="form-control-plaintext">Dataset Name Placeholder</p>
                    </div>
                    <div class="col-md-4">
                        <label class="form-label required">Optimization</label>
                        <p id="id_edit_optimization_name" class="form-control-plaintext">Optimization Name Placeholder</p>
                    </div>
                </div>

                <!-- Editor for engine.py -->
                <div class="mb-3">
                    <label class="form-label">Engine Code (engine.py)</label>
                    <div class="editor" id="editor_edit_engine_py"></div>
                </div>

                <!-- Text area for config.yaml -->
                <div class="mb-3">
                    <label class="form-label">Configuration (config.yaml)</label>
                    <textarea id="id_config_yaml_editor" class="form-control" rows="10" placeholder="Config YAML content"></textarea>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-link" data-bs-dismiss="modal">Cancel</button>
                <button id="id_edit_run_ok" type="button" class="btn btn-primary">Save Changes</button>
            </div>
        </div>
    </div>
</div>

<style>
    .editor {
        width: 100%;
        height: 400px; /* Adjust as needed */
    }
    .form-control-plaintext {
        font-weight: bold;
    }
</style>


<style>
    .editor {
        width: 100%;
        height: 400px; /* Adjust as needed */
    }
</style>

<!-- Include the runs.js script -->
<script src="/static/src/runs.js"></script>
{% endblock %}

=== ./templates/dashboard.html ===
{% extends "base.html" %}

{% block content %}
<!-- //page content begin -->
<div class="page-wrapper">
    <div class="container-xl">
        <!-- Page title -->
        <div class="page-header d-print-none">
            <div class="row g-2 align-items-center">
                <div class="col">
                    <!-- Page pre-title -->
                    <div class="page-pretitle">
                        Dashboard
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="page-body">
        <div class="container-xl">
            <div class="row row-deck row-cards">
                <div class="col-lg-12">
                    <div class="card">
                        <div class="card-body">
                            <h3 class="card-title"><span class="badge bg-green">Node:1</span></h3>
                            
                            <!-- CPU and Memory -->
                            <div class="row">
                                <div class="col-lg-6">
                                    <div class="card">
                                        <div class="card-body">
                                            <div class="d-flex align-items-center">
                                                <div class="subheader">CPU</div>
                                            </div>
                                            <div class="d-flex align-items-baseline">
                                                <div class="h2">{{ cpu*100 }}%</div>
                                            </div>
                                            <div class="progress">
                                                <div class="progress-bar bg-info" role="progressbar" style="width: {{ cpu*100 }}%"></div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-lg-6">
                                    <div class="card">
                                        <div class="card-body">
                                            <div class="d-flex align-items-center">
                                                <div class="subheader">CPU: Memory Used</div>
                                            </div>
                                            <div class="d-flex align-items-baseline">
                                                <div class="h2">{{ cpu_mem }}%</div>
                                            </div>
                                            <div class="progress">
                                                <div class="progress-bar bg-info" role="progressbar" style="width: {{ cpu_mem }}%"></div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- GPU and GPU Memory in Pairs -->
                            {% for i in range(0, num_gpus) %}
                            <div class="row">
                                <div class="col-lg-6">
                                    <div class="card">
                                        <div class="card-body">
                                            <div class="d-flex align-items-center">
                                                <div class="subheader">GPU{{ i+1 }}</div>
                                            </div>
                                            <div class="d-flex align-items-baseline">
                                                <div class="h2">{{ gpus[i][0]*100 }}%</div>
                                            </div>
                                            <div class="progress">
                                                <div class="progress-bar bg-info" role="progressbar" style="width: {{ gpus[i][0]*100 }}%"></div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-lg-6">
                                    <div class="card">
                                        <div class="card-body">
                                            <div class="d-flex align-items-center">
                                                <div class="subheader">GPU{{ i+1 }}: Memory Used</div>
                                            </div>
                                            <div class="d-flex align-items-baseline">
                                                <div class="h2">{{ gpus[i][1] }}%</div>
                                            </div>
                                            <div class="progress">
                                                <div class="progress-bar bg-info" role="progressbar" style="width: {{ gpus[i][1] }}%"></div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            {% endfor %}
                            
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<!-- //page content end -->
{% endblock %}

=== ./templates/optimize.html ===
{% extends 'base.html' %}
{% block content %}
<div class="page-wrapper">
    <div class="container-fluid py-4">
        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h3 class="card-title">Optimizations</h3>
                <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#id_modal_create_optimization">Create Optimization</button>
            </div>
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead>
                        <tr>
                            <th>Original Model Name</th>
                            <th>Optimize Method Name</th>
                            <th>Misc</th>
                            <th>ACTIONS</th>
                        </tr>
                        </thead>
                        <tbody id="id_table_body_optimizations">
                        <!-- Optimization items will be dynamically populated here -->
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Create Optimization Modal -->
<div class="modal modal-blur fade" id="id_modal_create_optimization" tabindex="-1">
    <div class="modal-dialog modal-xl modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Create Optimization</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <!-- Form Fields -->
                <div class="row mb-3">
                    <div class="col-md-6">
                        <label class="form-label required">Original Model Name</label>
                        <select id="id_original_model_name" class="form-select">
                            <!-- Options will be populated dynamically -->
                        </select>
                    </div>
                    <div class="col-md-6">
                        <label class="form-label required">Optimize Method Name</label>
                        <input id="id_optimize_method_name" type="text" class="form-control" placeholder="Enter optimize method name" autocomplete="off">
                    </div>
                </div>
                <div class="row mb-3">
                    <div class="col-md-12">
                        <label class="form-label required">Optimization Template</label>
                        <select id="id_optimization_template" class="form-select">
                            <!-- Options will be populated dynamically -->
                        </select>
                    </div>
                </div>
                <!-- Ace Editor -->
                <div class="mt-3">
                    <label class="form-label">optimize.py</label>
                    <div id="editor_optimize_py" class="editor"></div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-link link-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="id_create_optimization_ok">Create Optimization</button>
            </div>
        </div>
    </div>
</div>

<!-- Include optimize.js -->
<script src="/static/src/optimize.js"></script>
{% endblock %}

=== ./templates/sign-in.html ===
<!doctype html>
<html lang="en">
<head>
	<meta charset="utf-8" />
	<meta name="viewport" content="width=device-width, initial-scale=1, viewport-fit=cover" />
	<meta http-equiv="X-UA-Compatible" content="ie=edge" />
	<title>Sign in</title>
	<link href="/static/dist/css/tabler.min.css" rel="stylesheet" />
</head>
<body>
	<div class="page page-center">
		<div class="container-tight py-4">
			<div class="text-center mb-4">
				<!-- <a href="." class="navbar-brand navbar-brand-autodark"><img src="./static/images/ai.png" height="100" alt=""></a> -->
			</div>
			<form class="card card-md" action="/auth/signin" method="post" autocomplete="off">
				<div class="card-body">
					<img class="mx-auto d-block" src="/static/images/logo.png" height="80" alt="">
					<p class="h1 text-center mb-3 mt-3">Login to Edgifi</p>
					{% with messages = get_flashed_messages() %}
					{% if messages %}
					<!-- <label class="form-label">{{ messages[0] }}</label>   -->
					<div class="alert alert-warning" role="alert">{{ messages[0] }}</div>
					{% endif %}
					{% endwith %}
					<div class="mb-3">
						<label class="form-label">ID
						</label>
						<input name="user" type="text" class="form-control" value="{{ user }}" placeholder="Enter ID">
					</div>
					<div class="mb-2">
						<label class="form-label">
							Password
						</label>
						<div class="input-group input-group-flat">
							<input name="password" type="password" class="form-control" placeholder="Password" autocomplete="off">
						</div>
					</div>
					<div class="form-footer">
						<button id="id_sign_in" type="submit" class="btn btn-primary w-100">Sign in</button>
					</div>
				</div>
			</form>
			<div class="text-center text-muted mt-3">
				Don't have account yet? <a href="/auth/signup" tabindex="-1">Sign up</a>
			</div>
		</div>
	</div>

</body>

</html>
=== ./templates/jobs.html ===
{% extends "base.html" %}

{% block content %}

<script src="/static/ace/src-min/ace.js" type="text/javascript" charset="utf-8"></script>
<script src="/static/js/apexcharts.min.js"></script>
<script src="/static/src/jobs.js" defer></script>

<div class="page-wrapper">
	<div class="container-xl">
		<!-- Page title -->
		<div class="page-header">
			<div class="row align-items-center">
				<div class="col">
					<!-- Page pre-title -->
					<div class="page-pretitle">
						Jobs
					</div>
				</div>
				<div class="col-12 col-md-auto ms-auto">
					<div class="btn-list">
						<div class="input-icon">
							<span class="input-icon-addon">
								<!-- Download SVG icon from http://tabler-icons.io/i/search -->
								<svg xmlns="http://www.w3.org/2000/svg" class="icon" width="24"
									height="24" viewBox="0 0 24 24" stroke-width="2"
									stroke="currentColor" fill="none" stroke-linecap="round"
									stroke-linejoin="round">
									<path stroke="none" d="M0 0h24v24H0z" fill="none"></path>
									<circle cx="10" cy="10" r="7"></circle>
									<line x1="21" y1="21" x2="15" y2="15"></line>
								</svg>
							</span>
							<input id="id_search" type="text" value="" class="form-control" placeholder="Search..." aria-label="Search..." autocomplete="off">
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>

	<div class="page-body">
		<div class="container-xl">	
			<div class="col-12">							
				<div class="card">
					<table class="table table-vcenter card-table">
						<thead>
							<tr>
								<th class="w-auto">Model:Tag</th>
								<th class="w-auto">Task</th>
								<th class="w-auto">Job</th>
								<th class="w-auto">Best accuracy</th>
								<th class="w-auto">Elasped time</th>
								<th class="w-auto">Progress</th>								
								<th class="w-auto"></th>
							</tr>
						</thead>
						<tbody id="id_table_body">
							<!-- <tr>
								<td>M1</td>
								<td>C100</td>											
								<td>Train</td>
								<td>0.90</td>
								<td class="text-sm-center">
									<small class="text-sm-center">50%</small>
									<progress class="progress" value="50" max="100"></progress>
								</td>
								<td>00:00:00</td>																			
								<td class="text-end">
									<div class="dropdown">
										<button class="btn btn-sm dropdown-toggle" type="button" aria-haspopup="true" data-bs-toggle="dropdown">
											Actions
										</button>
										<ul class="dropdown-menu">
											<li><a class="dropdown-item" href="#">Cancel</a></li>
											<li><a class="dropdown-item" href="#">Delete</a></li>
											<li><a class="dropdown-item" href="#">Log</a></li>
											<li><a class="dropdown-item" href="#">Graph</a></li>
										</ul>
									</div>
								</td>
							</tr> -->
						</tbody>
					</table>
				</div>
			</div>
		</div>
	</div>

	<div id="id_modal_confirm" class="modal fade" tabindex="-1" role="dialog">
		<div class="modal-dialog modal-sm modal-dialog-centered" role="document">
		  <div class="modal-content">
			<div class="modal-body">
			  <div class="modal-title">Are you sure?</div>
			  <div id="id_modal_confirm_msg" class="text-muted">Do you really want to ?</div>
			</div>
			<div class="modal-footer">
			  <button type="button" class="btn btn-link link-secondary me-auto" data-bs-dismiss="modal">Cancel</button>
			  <button id="id_modal_confirm_ok" type="button" class="btn btn-danger" data-bs-dismiss="modal">Yes!</button>
			</div>
		  </div>
		</div>
	</div>

	
	<div class="modal fade" id="id_modal_log" tabindex="-1" role="dialog" aria-hidden="true">
		<div class="modal-dialog modal-lg modal-dialog-centered" role="document">
			<div class="modal-content">
				<div class="modal-header">
					<h5 class="modal-title">Log</h5>
					<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
				</div>	
				<div id="id_modal_log_msg" style="height: 30rem"></div>
			</div>
		</div>
	</div>

	<div class="modal fade" id="id_modal_graph" tabindex="-1" role="dialog" aria-hidden="true">
		<div class="modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable" role="document">
			<div class="modal-content">
				<div class="modal-header">
					<h5 class="modal-title">Graph</h5>
					<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
				</div>	
				<div id="id_modal_graph_body" class="modal-body">
					<div id="id_modal_graph_chart1" style="height: 30rem">a</div>
				</div>
			</div>
		</div>
	</div>	

</div>

{% endblock %}
=== ./templates/models.html ===
{% extends 'base.html' %}
{% block content %}
<div class="page-wrapper">
    <div class="container-fluid py-4">
        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h3 class="card-title">Models</h3>
                <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#id_modal_create_model">Create Model</button>
            </div>
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead>
                        <tr>
                            <th>NAME</th>
                            <th>TYPE</th>
                            <th>ARCHITECTURE</th>
                            <th>ACTIONS</th>
                        </tr>
                        </thead>
                        <tbody id="id_table_body_models">
                        <!-- Model items will be dynamically populated here -->
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Create Model Modal -->
<div class="modal modal-blur fade" id="id_modal_create_model" tabindex="-1">
    <div class="modal-dialog modal-xl modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Create Model</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="row mb-3">
                    <div class="col-md-6">
                        <label class="form-label required">Model Name</label>
                        <input id="id_model_name" type="text" class="form-control" placeholder="Enter model name" autocomplete="off">
                    </div>
                    <div class="col-md-6">
                        <label class="form-label required">Model Type</label>
                        <input id="id_model_type" type="text" class="form-control" placeholder="e.g., Vision, Language" autocomplete="off">
                    </div>
                </div>
                <div class="row mb-3">
                    <div class="col-md-12">
                        <label class="form-label required">Model Architecture</label>
                        <input id="id_model_architecture" type="text" class="form-control" placeholder="e.g., Transformer, ResNet" autocomplete="off">
                    </div>
                </div>
                <ul class="nav nav-tabs" role="tablist">
                    <li class="nav-item">
                        <a class="nav-link active" data-bs-toggle="tab" href="#tab_config_yaml" role="tab">config.yaml</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link" data-bs-toggle="tab" href="#tab_model_py" role="tab">model.py</a>
                    </li>
                </ul>
                <div class="tab-content mt-3">
                    <div class="tab-pane fade show active" id="tab_config_yaml" role="tabpanel">
                        <div id="editor_config_yaml" class="editor"></div>
                    </div>
                    <div class="tab-pane fade" id="tab_model_py" role="tabpanel">
                        <div id="editor_model_py" class="editor"></div>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-link link-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="id_create_model_ok">Create Model</button>
            </div>
        </div>
    </div>
</div>

<script>
    $(document).ready(function () {
        // Initialize Ace Editors when the modal is shown
        $('#id_modal_create_model').on('shown.bs.modal', function () {
            if (!window.editorConfigYaml) {
                window.editorConfigYaml = ace.edit("editor_config_yaml");
                editorConfigYaml.setTheme("ace/theme/monokai");
                editorConfigYaml.session.setMode("ace/mode/yaml");
                editorConfigYaml.setOptions({
                    maxLines: Infinity,
                    minLines: 30
                });
            }
            if (!window.editorModelPy) {
                window.editorModelPy = ace.edit("editor_model_py");
                editorModelPy.setTheme("ace/theme/monokai");
                editorModelPy.session.setMode("ace/mode/python");
                editorModelPy.setOptions({
                    maxLines: Infinity,
                    minLines: 30
                });
            }

            // Load default content from templates
            $.get('/models/load_template', function (data) {
                if (data.error) {
                    $.notify(data.error, "error");
                } else {
                    editorConfigYaml.setValue(data.config, -1);
                    editorModelPy.setValue(data.model, -1);
                }
            }).fail(function () {
                $.notify("Failed to load template files.", "error");
            });
        });

        // Handle Create Model Button Click
        $('#id_create_model_ok').click(async function () {
            const modelName = $('#id_model_name').val();
            const modelType = $('#id_model_type').val();
            const modelArchitecture = $('#id_model_architecture').val();

            // Validate input fields
            if (!modelName || !modelType || !modelArchitecture) {
                $.notify("Please fill in all the required fields.", "error");
                return;
            }

            // Get editor content
            const configYamlContent = editorConfigYaml.getValue();
            const modelPyContent = editorModelPy.getValue();

            // Prepare the payload
            const payload = {
                meta: {
                    model_name: modelName,
                    model_type: modelType,
                    model_architecture: modelArchitecture
                },
                config: configYamlContent,
                model: modelPyContent,
                project_name: sessionStorage.getItem('project_name')
            };

            try {
                // Send the request to create the model
                const response = await fetch(`/models/save`, {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify(payload)
                });

                const data = await response.json();
                if (!data.error) {
                    $.notify("Model created successfully!", "success");
                    $('#id_modal_create_model').modal('hide');
                    loadModelList();
                } else {
                    $.notify(data.error, "error");
                }
            } catch (error) {
                console.error("Create model error:", error);
                $.notify("Failed to create model.", "error");
            }
        });

        // Function to Load Model List
        async function loadModelList() {
            try {
                const response = await fetch(`/models/list`, {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify({ project_name: sessionStorage.getItem('project_name') })
                });

                const data = await response.json();
                if (!data.error) {
                    updateModelTable(data.models);
                } else {
                    $.notify(data.error, "error");
                }
            } catch (error) {
                console.error("Load model list error:", error);
                $.notify("Failed to load models. Please ensure the server is running and the project name is correctly provided.", "error");
            }
        }

        // Function to Update Model Table
        function updateModelTable(models) {
            const $tableBody = $('#id_table_body_models');
            $tableBody.empty();

            if (models.length === 0) {
                $tableBody.append('<tr><td colspan="4" class="text-center">No models available</td></tr>');
            } else {
                models.forEach(model => {
                    const $row = $(
                        `<tr>
                            <td>${model.model_name}</td>
                            <td>${model.model_type}</td>
                            <td>${model.model_architecture}</td>
                            <td>
                                <button class="btn btn-sm btn-warning" onclick="editModel('${model.model_name}')">Edit</button>
                                <button class="btn btn-sm btn-danger" onclick="deleteModel('${model.model_name}')">Delete</button>
                            </td>
                        </tr>`
                    );
                    $tableBody.append($row);
                });
            }
        }

        // Handle Edit Model
        window.editModel = function (modelName) {
            // Find model in the list and populate the modal with the current values
            $.ajax({
                url: '/models/list',
                method: 'POST',
                contentType: 'application/json',
                data: JSON.stringify({ project_name: sessionStorage.getItem('project_name') }),
                success: function (data) {
                    if (data.error) {
                        $.notify(data.error, "error");
                    } else {
                        const model = data.models.find(m => m.model_name === modelName);
                        if (model) {
                            $('#id_model_name').val(model.model_name);
                            $('#id_model_type').val(model.model_type);
                            $('#id_model_architecture').val(model.model_architecture);
                            editorConfigYaml.setValue(model.config || '', -1);
                            editorModelPy.setValue(model.model || '', -1);
                            $('#id_modal_create_model').modal('show');
                        }
                    }
                },
                error: function () {
                    $.notify("Failed to load model list.", "error");
                }
            });
        };

        // Handle Delete Model
        window.deleteModel = async function (modelName) {
            if (!confirm("Are you sure you want to delete this model?")) {
                return;
            }

            try {
                const response = await fetch(`/models/delete`, {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify({ name: modelName, project_name: sessionStorage.getItem('project_name') })
                });

                const data = await response.json();
                if (!data.error) {
                    $.notify("Model deleted successfully!", "success");
                    loadModelList();
                } else {
                    $.notify(data.error, "error");
                }
            } catch (error) {
                console.error("Delete model error:", error);
                $.notify("Failed to delete model.", "error");
            }
        };

        // Initial Load of Model List
        loadModelList();
    });
</script>
{% endblock %}

=== ./templates/base.html ===
<!doctype html>
<html lang="en">
    <head>
        <meta charset="utf-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1, viewport-fit=cover" />
        <meta http-equiv="X-UA-Compatible" content="ie=edge" />
        <title>Edge Vision Framework</title>
        
        <!-- CSS -->
        <link href="/static/dist/css/tabler.min.css" rel="stylesheet" />
        <link href="/static/dist/css/tabler-vendors.min.css" rel="stylesheet" />
        
        <!-- Toastr CSS -->
        <link href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css" rel="stylesheet" />

        <!-- Your Custom CSS -->
        <link href="/static/css/custom.css" rel="stylesheet" />
        
        <!-- Core Dependencies -->
        <script src="/static/dist/js/tabler.min.js"></script>

        <!-- jQuery (Ensure it's loaded before Toastr if Toastr depends on it) -->
        <script src="/static/js/jquery.min.js"></script>
        <script src="/static/js/jquery.cookie.min.js"></script>

        <!-- Toastr JS -->
        <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>

        <!-- notify.js (Optional: Remove if not needed to avoid redundancy) -->
        <script src="/static/js/notify.js"></script>
        
        <!-- Ace Editor JS -->
        <script src="/static/ace/src-min/ace.js"></script>
    
        <!-- Application Scripts -->
        <script src="/static/src/base.js"></script>
        <!-- Only include other scripts if they're needed for the current page -->
        <!-- <script src="/static/src/datasets.js"></script>
        <script src="/static/src/models.js"></script>
        <script src="/static/src/experiments.js"></script> -->

        <!-- Initialize Toastr (Optional but Recommended) -->
        <script>
            $(document).ready(function() {
                // Toastr Configuration
                toastr.options = {
                    "closeButton": true,
                    "debug": false,
                    "newestOnTop": true,
                    "progressBar": true,
                    "positionClass": "toast-top-right",
                    "preventDuplicates": false,
                    "onclick": null,
                    "showDuration": "300",
                    "hideDuration": "1000",
                    "timeOut": "5000",
                    "extendedTimeOut": "1000",
                    "showEasing": "swing",
                    "hideEasing": "linear",
                    "showMethod": "fadeIn",
                    "hideMethod": "fadeOut"
                };

                // Example: Display a welcome message (Optional)
                // toastr.success("Welcome to Edge Vision Framework!");
            });
        </script>
    </head>

<body class="layout-fluid">
    <div class="page">
        <!-- Sidebar -->
        <aside class="navbar navbar-vertical navbar-expand-lg navbar-dark">
            <div class="container-fluid">
                <!-- Navbar Toggle -->
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#sidebar-menu">
                    <span class="navbar-toggler-icon"></span>
                </button>

                <!-- Brand Logo -->
                <h1 class="navbar-brand navbar-brand-autodark justify-content-start">
                    <img src="/static/images/logo.png" alt="Edge Vision Framework" class="navbar-brand-image">
                    <span class="p-2 text-white tracking-wide">Edge Vision<br>Framework</span>
                </h1>

                <!-- Sidebar Menu -->
                <div class="collapse navbar-collapse" id="sidebar-menu">
                    <!-- Project Selection -->
                    <div class="px-3 my-3">
                        <div class="d-flex justify-content-between align-items-center mb-2">
                            <span class="text-muted">Project</span>
                            <div class="btn-list">
                                <button class="btn btn-sm btn-success" title="Create project" data-bs-toggle="modal" 
                                        data-bs-target="#id_modal_create_project">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="icon" width="24" height="24" 
                                         viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" 
                                         stroke-linecap="round" stroke-linejoin="round">
                                        <path stroke="none" d="M0 0h24v24H0z" fill="none"/>
                                        <line x1="12" y1="5" x2="12" y2="19"/>
                                        <line x1="5" y1="12" x2="19" y2="12"/>
                                    </svg>
                                </button>
                                <button class="btn btn-sm btn-danger" title="Delete project" data-bs-toggle="modal" 
                                        data-bs-target="#id_modal_delete_project">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="icon" width="24" height="24" 
                                         viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" 
                                         stroke-linecap="round" stroke-linejoin="round">
                                        <path stroke="none" d="M0 0h24v24H0z" fill="none"/>
                                        <line x1="4" y1="7" x2="20" y2="7"/>
                                        <line x1="10" y1="11" x2="10" y2="17"/>
                                        <line x1="14" y1="11" x2="14" y2="17"/>
                                        <path d="M5 7l1 12a2 2 0 0 0 2 2h8a2 2 0 0 0 2 -2l1 -12"/>
                                        <path d="M9 7v-3a1 1 0 0 1 1 -1h4a1 1 0 0 1 1 1v3"/>
                                    </svg>
                                    Delete Project
                                </button>
                            </div>
                        </div>
                        <select id="id_project" class="form-select" aria-label="Select Project">
                            <!-- Project options populated by JavaScript -->
                        </select>
                    </div>

                    <!-- Navigation Menu -->
                    <ul class="navbar-nav pt-lg-3">
                        <!-- Dashboard -->
                        <li class="nav-item {% if request.endpoint == 'dashboard' %}active{% endif %}">
                            <a class="nav-link" href="/dashboard" id="sidebar_dashboard">
                                <span class="nav-link-icon">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="icon" width="24" height="24" 
                                         viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" 
                                         stroke-linecap="round" stroke-linejoin="round">
                                        <path stroke="none" d="M0 0h24v24H0z" fill="none"/>
                                        <rect x="4" y="4" width="6" height="8" rx="1"/>
                                        <rect x="4" y="16" width="6" height="4" rx="1"/>
                                        <rect x="14" y="12" width="6" height="8" rx="1"/>
                                        <rect x="14" y="4" width="6" height="4" rx="1"/>
                                    </svg>
                                </span>
                                <span class="nav-link-title">Dashboard</span>
                            </a>
                        </li>

                        <!-- Datasets -->
                        <li class="nav-item {% if request.endpoint == 'datasets' %}active{% endif %}">
                            <a class="nav-link" href="/datasets" id="sidebar_datasets">
                                <span class="nav-link-icon">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="icon" width="24" height="24" 
                                         viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" 
                                         stroke-linecap="round" stroke-linejoin="round">
                                        <path stroke="none" d="M0 0h24v24H0z" fill="none"/>
                                        <ellipse cx="12" cy="6" rx="8" ry="3"/>
                                        <path d="M4 6v6a8 3 0 0 0 16 0v-6"/>
                                        <path d="M4 12v6a8 3 0 0 0 16 0v-6"/>
                                    </svg>
                                </span>
                                <span class="nav-link-title">Datasets</span>
                            </a>
                        </li>

                        <!-- Models -->
                        <li class="nav-item {% if request.endpoint == 'models' %}active{% endif %}">
                            <a class="nav-link" href="/models" id="sidebar_models">
                                <span class="nav-link-icon">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="icon" width="24" height="24" 
                                         viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" 
                                         stroke-linecap="round" stroke-linejoin="round">
                                        <path stroke="none" d="M0 0h24v24H0z" fill="none"/>
                                        <path d="M9 5h-2a2 2 0 0 0 -2 2v12a2 2 0 0 0 2 2h10a2 2 0 0 0 2 -2v-12a2 2 0 0 0 -2 -2h-2"/>
                                        <rect x="9" y="3" width="6" height="4" rx="2"/>
                                    </svg>
                                </span>
                                <span class="nav-link-title">Models</span>
                            </a>
                        </li>
                        
                        <!-- Optimizations -->
                        <li class="nav-item {% if request.endpoint == 'optimizations' %}active{% endif %}">
                            <a class="nav-link" href="/optimizations" id="sidebar_optimizations">
                                <span class="nav-link-icon">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="icon" width="24" height="24" 
                                         viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" 
                                         stroke-linecap="round" stroke-linejoin="round">
                                        <path stroke="none" d="M0 0h24v24H0z" fill="none"/>
                                        <path d="M12 12m-9 0a9 9 0 1 0 18 0a9 9 0 1 0 -18 0"/>
                                        <path d="M12 17l0 .01"/>
                                        <path d="M12 13.5a1.5 1.5 0 0 1 1 -1.5a2.6 2.6 0 1 0 -3 -4"/>
                                    </svg>
                                </span>
                                <span class="nav-link-title">Optimizations</span>
                            </a>
                        </li>

                        <!-- Runs -->
                        <li class="nav-item {% if request.endpoint == 'runs' %}active{% endif %}">
                            <a class="nav-link" href="/runs" id="sidebar_experiments">
                                <span class="nav-link-icon">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="icon" width="24" height="24" 
                                         viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" 
                                         stroke-linecap="round" stroke-linejoin="round">
                                        <path stroke="none" d="M0 0h24v24H0z" fill="none"/>
                                        <path d="M4 20h16"/>
                                        <path d="M9 20v-4"/>
                                        <path d="M15 20v-4"/>
                                        <path d="M5 4h14a1 1 0 0 1 1 1v10a1 1 0 0 1 -1 1h-14a1 1 0 0 1 -1 -1v-10a1 1 0 0 1 1 -1"/>
                                    </svg>
                                </span>
                                <span class="nav-link-title">Runs</span>
                            </a>
                        </li>


                        <!-- Monitoring -->
                        <li class="nav-item {% if request.endpoint == 'monitoring' %}active{% endif %}">
                            <a class="nav-link" href="/monitoring" id="sidebar_monitoring">
                                <span class="nav-link-icon">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="icon" width="24" height="24" 
                                         viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" 
                                         stroke-linecap="round" stroke-linejoin="round">
                                        <path stroke="none" d="M0 0h24v24H0z" fill="none"/>
                                        <path d="M3 12h4l3 8l4 -16l3 8h4"/>
                                    </svg>
                                </span>
                                <span class="nav-link-title">Monitoring</span>
                            </a>
                        </li>

                        <!-- Deployment -->
                        <li class="nav-item {% if request.endpoint == 'deployment' %}active{% endif %}">
                            <a class="nav-link" href="/deployment" id="sidebar_deployment">
                                <span class="nav-link-icon">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="icon" width="24" height="24" 
                                         viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" 
                                         stroke-linecap="round" stroke-linejoin="round">
                                        <path stroke="none" d="M0 0h24v24H0z" fill="none"/>
                                        <path d="M14 8v2a2 2 0 0 0 2 2h7a2 2 0 0 0 2 -2v-2"/>
                                        <path d="M5 12h14l-3 -3m0 6l3 -3"/>
                                    </svg>
                                </span>
                                <span class="nav-link-title">Deployment</span>
                            </a>
                        </li>
                    </ul>
                    
                        <!-- User Menu -->
                        <div class="mt-auto">
                            <div class="nav-item dropdown">
                                <a href="#" class="nav-link d-flex lh-1 text-reset p-0" data-bs-toggle="dropdown">
                                    <span class="avatar avatar-sm">{{ session['user']|first|upper }}</span>
                                    <div class="d-none d-xl-block ps-2">
                                        <div id="id_user">{{ session['user'] }}</div>
                                    </div>
                                </a>
                                <div class="dropdown-menu dropdown-menu-end">
                                    <a href="#" class="dropdown-item" data-bs-toggle="modal" data-bs-target="#modal-logout">
                                        <svg xmlns="http://www.w3.org/2000/svg" class="icon dropdown-item-icon" width="24" height="24" 
                                             viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" 
                                             stroke-linecap="round" stroke-linejoin="round">
                                            <path stroke="none" d="M0 0h24v24H0z" fill="none"/>
                                            <path d="M14 8v-2a2 2 0 0 0 -2 -2h-7a2 2 0 0 0 -2 2v12a2 2 0 0 0 2 2h7a2 2 0 0 0 2 -2v-2"/>
                                            <path d="M7 12h14l-3 -3m0 6l3 -3"/>
                                        </svg>
                                        Logout
                                    </a>
                                </div>
                            </div>
                        </div>
                </div>
            </div>
        </aside>

        <!-- Page Content -->
        <div class="page-wrapper">
            {% block content %}{% endblock %}
        </div>

        <!-- Modals -->
        <!-- Create Project Modal -->
        <div class="modal modal-blur fade" id="id_modal_create_project" tabindex="-1">
            <div class="modal-dialog modal-sm modal-dialog-centered" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Create Project</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <div class="mb-3">
                            <label class="form-label required">Project Name</label>
                            <input id="id_project_name" type="text" class="form-control" 
                                   placeholder="Enter project name" autocomplete="off">
                            <small class="form-hint">Only letters, numbers, hyphens and underscores allowed</small>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-link link-secondary" data-bs-dismiss="modal">
                            Cancel
                        </button>
                        <button type="button" class="btn btn-primary" id="id_create_project_ok">
                            <svg xmlns="http://www.w3.org/2000/svg" class="icon" width="24" height="24" 
                                 viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" 
                                 stroke-linecap="round" stroke-linejoin="round">
                                <path stroke="none" d="M0 0h24v24H0z" fill="none"/>
                                <line x1="12" y1="5" x2="12" y2="19"/>
                                <line x1="5" y1="12" x2="19" y2="12"/>
                            </svg>
                            Create Project
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Delete Project Modal -->
        <div class="modal modal-blur fade" id="id_modal_delete_project" tabindex="-1">
            <div class="modal-dialog modal-sm modal-dialog-centered" role="document">
                <div class="modal-content">
                    <div class="modal-body">
                        <div class="modal-title">Delete Project</div>
                        <div class="text-muted">Are you sure you want to delete this project? 
                            All associated data will be permanently removed. This action cannot be undone.</div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-link link-secondary" data-bs-dismiss="modal">
                            Cancel
                        </button>
                        <button type="button" class="btn btn-danger" id="id_delete_project_ok">
                            <svg xmlns="http://www.w3.org/2000/svg" class="icon" width="24" height="24" 
                                 viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" 
                                 stroke-linecap="round" stroke-linejoin="round">
                                <path stroke="none" d="M0 0h24v24H0z" fill="none"/>
                                <line x1="4" y1="7" x2="20" y2="7"/>
                                <line x1="10" y1="11" x2="10" y2="17"/>
                                <line x1="14" y1="11" x2="14" y2="17"/>
                                <path d="M5 7l1 12a2 2 0 0 0 2 2h8a2 2 0 0 0 2 -2l1 -12"/>
                                <path d="M9 7v-3a1 1 0 0 1 1 -1h4a1 1 0 0 1 1 1v3"/>
                            </svg>
                            Delete Project
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Logout Modal -->
        <div class="modal modal-blur fade" id="modal-logout" tabindex="-1">
            <div class="modal-dialog modal-sm modal-dialog-centered" role="document">
                <div class="modal-content">
                    <div class="modal-body">
                        <div class="modal-title">Logout</div>
                        <div class="text-muted">Are you sure you want to logout?</div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-link link-secondary" data-bs-dismiss="modal">
                            Cancel
                        </button>
                        <button type="button" class="btn btn-danger" id="id_logout_ok">
                            <svg xmlns="http://www.w3.org/2000/svg" class="icon" width="24" height="24" 
                                 viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" 
                                 stroke-linecap="round" stroke-linejoin="round">
                                <path stroke="none" d="M0 0h24v24H0z" fill="none"/>
                                <path d="M14 8v-2a2 2 0 0 0 -2 -2h-7a2 2 0 0 0 -2 2v12a2 2 0 0 0 2 2h7a2 2 0 0 0 2 -2v-2"/>
                                <path d="M7 12h14l-3 -3m0 6l3 -3"/>
                            </svg>
                            Logout
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Loading Indicator -->
        <div class="loading-indicator" style="display: none;">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>

        <!-- Notification Container (Optional: Toastr handles this) -->
        <!-- If you plan to use Toastr's default container, you can remove this -->
        <div id="notification-container" class="position-fixed bottom-0 end-0 p-3" 
             style="z-index: 1050"></div>
    </div>

    <!-- Error Boundary -->
    <div id="error-boundary" class="d-none">
        <div class="container-tight py-4">
            <div class="empty">
                <div class="empty-header">500</div>
                <p class="empty-title">Oops... Something went wrong</p>
                <p class="empty-subtitle text-muted">
                    We are sorry but our server encountered an internal error
                </p>
                <div class="empty-action">
                    <button onclick="window.location.reload()" class="btn btn-primary">
                        <svg xmlns="http://www.w3.org/2000/svg" class="icon" width="24" height="24" 
                             viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" 
                             fill="none" stroke-linecap="round" stroke-linejoin="round">
                            <path stroke="none" d="M0 0h24v24H0z" fill="none"/>
                            <path d="M14 8v-2a2 2 0 0 0 -2 -2h-7a2 2 0 0 0 -2 2v12a2 2 0 0 0 2 2h7a2 2 0 0 0 2 -2v-2"/>
                            <path d="M7 12h14l-3 -3m0 6l3 -3"/>
                        </svg>
                        Refresh Page
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Additional Scripts -->
    {% block scripts %}{% endblock %}
</body>

</html>

=== ./static/src/models.js ===
$(document).ready(function () {
    // Initialize Ace Editors
    var editorConfigYaml = ace.edit("editor_config_yaml");
    editorConfigYaml.setTheme("ace/theme/monokai");
    editorConfigYaml.session.setMode("ace/mode/yaml");
    editorConfigYaml.setOptions({
        maxLines: Infinity,
        minLines: 30
    });

    var editorModelPy = ace.edit("editor_model_py");
    editorModelPy.setTheme("ace/theme/monokai");
    editorModelPy.session.setMode("ace/mode/python");
    editorModelPy.setOptions({
        maxLines: Infinity,
        minLines: 30
    });

    // Modal Event Listener - Populate Editors with Template Content
    $('#id_modal_create_model').on('show.bs.modal', function () {
        // Load default content from templates
        $.get('/models/load_template', function (data) {
            if (data.error) {
                $.notify(data.error, "error");
            } else {
                editorConfigYaml.setValue(data.config, -1);
                editorModelPy.setValue(data.model, -1);
            }
        }).fail(function () {
            $.notify("Failed to load template files.", "error");
        });
    });

    // Handle Create Model Button Click
    $('#id_create_model_ok').click(async function () {
        const modelName = $('#id_model_name').val();
        const modelType = $('#id_model_type').val();
        const modelArchitecture = $('#id_model_architecture').val();

        // Validate input fields
        if (!modelName || !modelType || !modelArchitecture) {
            $.notify("Please fill in all the required fields.", "error");
            return;
        }

        // Get editor content
        const configYamlContent = editorConfigYaml.getValue();
        const modelPyContent = editorModelPy.getValue();

        // Prepare the payload
        const payload = {
            meta: {
                model_name: modelName,
                model_type: modelType,
                model_architecture: modelArchitecture
            },
            config: configYamlContent,
            model: modelPyContent,
            project_name: sessionStorage.getItem('project_name')
        };

        try {
            // Send the request to create the model
            const response = await fetch(`/models/save`, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify(payload)
            });

            const data = await response.json();
            if (!data.error) {
                $.notify("Model created successfully!", "success");
                $('#id_modal_create_model').modal('hide');
                loadModelList();
            } else {
                $.notify(data.error, "error");
            }
        } catch (error) {
            console.error("Create model error:", error);
            $.notify("Failed to create model.", "error");
        }
    });

    // Function to Load Model List
    async function loadModelList() {
        try {
            const response = await fetch(`/models/list`, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({ project_name: sessionStorage.getItem('project_name') })
            });

            const data = await response.json();
            if (!data.error) {
                updateModelTable(data.models);
            } else {
                $.notify(data.error, "error");
            }
        } catch (error) {
            console.error("Load model list error:", error);
            $.notify("Failed to load models. Please ensure the server is running and the project name is correctly provided.", "error");
        }
    }

    // Function to Update Model Table
    function updateModelTable(models) {
        const $tableBody = $('#id_table_body_models');
        $tableBody.empty();

        if (models.length === 0) {
            $tableBody.append('<tr><td colspan="4" class="text-center">No models available</td></tr>');
        } else {
            models.forEach(model => {
                const $row = $(
                    `<tr>
                        <td>${model.model_name}</td>
                        <td>${model.model_type}</td>
                        <td>${model.model_architecture}</td>
                        <td>
                            <button class="btn btn-sm btn-warning" onclick="editModel('${model.model_name}')">Edit</button>
                            <button class="btn btn-sm btn-danger" onclick="deleteModel('${model.model_name}')">Delete</button>
                        </td>
                    </tr>`
                );
                $tableBody.append($row);
            });
        }
    }

    // Handle Edit Model
    window.editModel = function (modelName) {
        // Find model in the list and populate the modal with the current values
        $.ajax({
            url: '/models/list',
            method: 'POST',
            contentType: 'application/json',
            data: JSON.stringify({ project_name: sessionStorage.getItem('project_name') }),
            success: function (data) {
                if (data.error) {
                    $.notify(data.error, "error");
                } else {
                    const model = data.models.find(m => m.model_name === modelName);
                    if (model) {
                        $('#id_model_name').val(model.model_name);
                        $('#id_model_type').val(model.model_type);
                        $('#id_model_architecture').val(model.model_architecture);
                        editorConfigYaml.setValue(model.config || '', -1);
                        editorModelPy.setValue(model.model || '', -1);
                        $('#id_modal_create_model').modal('show');
                    }
                }
            },
            error: function () {
                $.notify("Failed to load model list.", "error");
            }
        });
    };

    // Handle Delete Model
    window.deleteModel = async function (modelName) {
        if (!confirm("Are you sure you want to delete this model?")) {
            return;
        }

        try {
            const response = await fetch(`/models/delete`, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({ name: modelName, project_name: sessionStorage.getItem('project_name') })
            });

            const data = await response.json();
            if (!data.error) {
                $.notify("Model deleted successfully!", "success");
                loadModelList();
            } else {
                $.notify(data.error, "error");
            }
        } catch (error) {
            console.error("Delete model error:", error);
            $.notify("Failed to delete model.", "error");
        }
    };

    // Initial Load of Model List
    loadModelList();
});

=== ./static/src/datasets.js ===
$(document).ready(function () {
    // Initialize Ace Editors
    var editorConfigYaml = ace.edit("editor_config_yaml");
    editorConfigYaml.setTheme("ace/theme/monokai");
    editorConfigYaml.session.setMode("ace/mode/yaml");
    editorConfigYaml.setOptions({
        maxLines: Infinity,
        minLines: 30
    });

    var editorDatasetPy = ace.edit("editor_dataset_py");
    editorDatasetPy.setTheme("ace/theme/monokai");
    editorDatasetPy.session.setMode("ace/mode/python");
    editorDatasetPy.setOptions({
        maxLines: Infinity,
        minLines: 30
    });

    var editorCollateFnPy = ace.edit("editor_collate_fn_py");
    editorCollateFnPy.setTheme("ace/theme/monokai");
    editorCollateFnPy.session.setMode("ace/mode/python");
    editorCollateFnPy.setOptions({
        maxLines: Infinity,
        minLines: 30
    });

    // Modal Event Listener - Populate Editors with Template Content
    $('#id_modal_create_dataset').on('show.bs.modal', function () {
        // Load default content from templates
        $.get('/datasets/load_template', function (data) {
            if (data.error) {
                $.notify(data.error, "error");
            } else {
                editorConfigYaml.setValue(data.config, -1);
                editorDatasetPy.setValue(data.dataset, -1);
                editorCollateFnPy.setValue(data.collate_fn, -1);
            }
        }).fail(function () {
            $.notify("Failed to load template files.", "error");
        });
    });

    // Handle Create Dataset Button Click
    $('#id_create_dataset_ok').click(async function () {
        const datasetName = $('#id_dataset_name').val();
        const datasetPath = $('#id_dataset_path').val();
        const datasetShape = $('#id_dataset_shape').val();
        const datasetMode = $('#id_dataset_mode').val();

        // Validate input fields
        if (!datasetName || !datasetPath || !datasetShape || !datasetMode) {
            $.notify("Please fill in all the required fields.", "error");
            return;
        }

        // Get editor content
        const configYamlContent = editorConfigYaml.getValue();
        const datasetPyContent = editorDatasetPy.getValue();
        const collateFnPyContent = editorCollateFnPy.getValue();

        // Prepare the payload
        const payload = {
            meta: {
                dataset_name: datasetName,
                dataset_path: datasetPath,
                dataset_shape: datasetShape,
                dataset_mode: datasetMode
            },
            config: configYamlContent,
            dataset: datasetPyContent,
            collate_fn: collateFnPyContent,
            project_name: sessionStorage.getItem('project_name')
        };

        try {
            // Send the request to create the dataset
            const response = await fetch(`/datasets/save`, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify(payload)
            });

            const data = await response.json();
            if (!data.error) {
                $.notify("Dataset created successfully!", "success");
                $('#id_modal_create_dataset').modal('hide');
                // await updateProjectJson('add', 'datasets', payload.meta);
                loadDatasetList();
            } else {
                $.notify(data.error, "error");
            }
        } catch (error) {
            console.error("Create dataset error:", error);
            $.notify("Failed to create dataset.", "error");
        }
    });

    // Function to Load Dataset List
    async function loadDatasetList() {
        try {
            const response = await fetch(`/datasets/list`, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({ project_name: sessionStorage.getItem('project_name') })
            });

            const data = await response.json();
            if (!data.error) {
                updateDatasetTable(data.datasets);
            } else {
                $.notify(data.error, "error");
            }
        } catch (error) {
            console.error("Load dataset list error:", error);
            $.notify("Failed to load datasets. Please ensure the server is running and the project name is correctly provided.", "error");
        }
    }

    // Function to Update Dataset Table
    function updateDatasetTable(datasets) {
        const $tableBody = $('#id_table_body_datasets');
        $tableBody.empty();

        if (datasets.length === 0) {
            $tableBody.append('<tr><td colspan="5" class="text-center">No datasets available</td></tr>');
        } else {
            datasets.forEach(dataset => {
                const $row = $(
                    `<tr>
                        <td>${dataset.dataset_name}</td>
                        <td>${dataset.dataset_path}</td>
                        <td>${dataset.dataset_shape}</td>
                        <td>${dataset.dataset_mode}</td>
                        <td>
                            <button class="btn btn-sm btn-warning" onclick="editDataset('${dataset.dataset_name}')">Edit</button>
                            <button class="btn btn-sm btn-danger" onclick="deleteDataset('${dataset.dataset_name}')">Delete</button>
                        </td>
                    </tr>`
                );
                $tableBody.append($row);
            });
        }
    }

    // Handle Edit Dataset
    window.editDataset = function (datasetName) {
        // Find dataset in the list and populate the modal with the current values
        $.ajax({
            url: '/datasets/list',
            method: 'POST',
            contentType: 'application/json',
            data: JSON.stringify({ project_name: sessionStorage.getItem('project_name') }),
            success: function (data) {
                if (data.error) {
                    $.notify(data.error, "error");
                } else {
                    const dataset = data.datasets.find(d => d.dataset_name === datasetName);
                    if (dataset) {
                        $('#id_dataset_name').val(dataset.dataset_name);
                        $('#id_dataset_path').val(dataset.dataset_path);
                        $('#id_dataset_shape').val(dataset.dataset_shape);
                        $('#id_dataset_mode').val(dataset.dataset_mode);
                        editorConfigYaml.setValue(dataset.config || '', -1);
                        editorDatasetPy.setValue(dataset.dataset || '', -1);
                        editorCollateFnPy.setValue(dataset.collate_fn || '', -1);
                        $('#id_modal_create_dataset').modal('show');
                    }
                }
            },
            error: function () {
                $.notify("Failed to load dataset list.", "error");
            }
        });
    };

    // Handle Delete Dataset
    window.deleteDataset = async function (datasetName) {
        if (!confirm("Are you sure you want to delete this dataset?")) {
            return;
        }

        try {
            const response = await fetch(`/datasets/delete`, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({ name: datasetName, project_name: sessionStorage.getItem('project_name') })
            });

            const data = await response.json();
            if (!data.error) {
                $.notify("Dataset deleted successfully!", "success");
                await updateProjectJson('remove', 'datasets', { dataset_name: datasetName });
                loadDatasetList();
            } else {
                $.notify(data.error, "error");
            }
        } catch (error) {
            console.error("Delete dataset error:", error);
            $.notify("Failed to delete dataset.", "error");
        }
    };

    // Function to update project.json
    async function updateProjectJson(action, key, value) {
        try {
            const response = await fetch(`/project/update_project_json`, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({
                    action: action,
                    project_name: sessionStorage.getItem('project_name'),
                    key: key,
                    value: value
                })
            });

            const data = await response.json();
            if (data.error) {
                console.error("Failed to update project.json:", data.error);
            }
        } catch (error) {
            console.error("updateProjectJson error:", error);
        }
    }

    // Initial Load of Dataset List
    loadDatasetList();
});

=== ./static/src/base.js ===
// Global state management
var App = (function() {
    var AppState = {
        lastSelectedOption: "dashboard",
        backup_ok: null,
        currentProject: null,
        currentRun: {
            step: 1,
            config: {
                basic: {
                    name: '',
                    type: 'train',
                    description: '',
                    tags: []
                },
                training: {
                    batchSize: 32,
                    epochs: 100,
                    learningRate: 0.001,
                    optimizer: 'adam',
                    weightDecay: 0.01,
                    scheduler: 'cosine'
                },
                selection: {
                    modelId: '',
                    datasetId: '',
                    modelConfig: {},
                    datasetConfig: {}
                }
            }
        },
        projects: [],
        models: [],
        datasets: []
    };
    
    function initializeEventHandlers() {
        // Modal handlers
        $('#id_create_project_ok').click(handleCreateProject);
        $('#id_delete_project_ok').click(handleDeleteProject);
        $('#id_logout_ok').click(handleLogout);

        // Project change handler
        $('#id_project').on('change', function() {
            const selectedProject = $(this).val();
            if (selectedProject) {
                AppState.currentProject = selectedProject;
                sessionStorage.setItem("project_name", selectedProject);
                handleProjectChange(selectedProject);
            }
        });

        // Sidebar navigation handlers
        $('#sidebar_dashboard').click(() => handleSidebarClick('dashboard'));
        $('#sidebar_datasets').click(() => handleSidebarClick('datasets'));
        $('#sidebar_models').click(() => handleSidebarClick('models'));
        $('#sidebar_experiments').click(() => handleSidebarClick('experiments'));
        $('#sidebar_optimizations').click(() => handleSidebarClick('optimizations'));
        $('#sidebar_deployment').click(() => handleSidebarClick('deployment'));
        $('#sidebar_monitoring').click(() => handleSidebarClick('monitoring'));
    }
    
    $(document).ready(function() {
        initializeEventHandlers();
        loadProjects();
    });

    function handleCreateProject() {
        const projectName = $("#id_project_name").val();
        if (!validateProjectName(projectName)) {
            showNotification("Project name is not valid! (only letters, numbers, - and _ are allowed)", "error");
            return;
        }

        createProject(projectName);
    }
    
    async function createProject(projectName) {
        try {
            const response = await fetch("/project/create", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({ project_name: projectName })
            });

            const data = await response.json();
            if (!data.err) {
                AppState.currentProject = projectName;
                sessionStorage.setItem("project_name", projectName);
                showNotification("Project created successfully!", "success");
                $("#id_modal_create_project").modal('hide');
                await createProjectJson(projectName); // Create project.json
                await loadProjects();
            } else {
                showNotification(data.err, "error");
            }
        } catch (error) {
            console.error("Create project error:", error);
            showNotification("Failed to create project", "error");
        }
    }

    async function createProjectJson(projectName) {
        try {
            const initialProjectJson = {
                datasets: [],
                models: [],
                experiments: [],
                optimizations: []
            };
            
            const response = await fetch(`/project/create_project_json`, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({
                    project_name: projectName,
                    project_json: initialProjectJson
                })
            });

            const data = await response.json();
            if (data.error) {
                console.error("Failed to create project.json:", data.error);
            }
        } catch (error) {
            console.error("createProjectJson error:", error);
        }
    }

    function validateProjectName(name) {
        return /^[a-zA-Z0-9_-]+$/.test(name);
    }

    async function handleDeleteProject() {
        const projectName = $("#id_project").val();
        try {
            const response = await fetch("/project/delete", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({ project_name: projectName })
            });

            const data = await response.json();
            if (!data.err) {
                sessionStorage.removeItem("project_name");
                showNotification("Project deleted successfully!", "success");
                await loadProjects();
                clearProjectRelatedItems();
            } else {
                showNotification(data.err, "error");
            }
        } catch (error) {
            console.error("Delete project error:", error);
            showNotification("Failed to delete project", "error");
            await loadProjects();
        }
    }

    async function loadProjects() {
        try {
            const response = await fetch("/project/list", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                }
            });

            const data = await response.json();
            if (!data.err) {
                updateProjectList(data.res);
            } else {
                showNotification(data.err, "error");
            }
        } catch (error) {
            console.error("Load project list error:", error);
            showNotification("Failed to load projects", "error");
        }
    }

    function updateProjectList(data) {
        const $projectSelect = $('#id_project');
        $projectSelect.empty();
    
        // Get current project from storage or state
        let currentProject = sessionStorage.getItem("project_name") || AppState.currentProject;
    
        // Create a default "Select Project" option
        const defaultOption = new Option('Select Project', '', !currentProject, !currentProject);
        $projectSelect.append(defaultOption);
    
        if (data.projects && data.projects.length > 0) {
            // If no current project but we have projects, use the first one
            if (!currentProject || currentProject === "undefined") {
                currentProject = data.projects[0];
                AppState.currentProject = currentProject;
                sessionStorage.setItem("project_name", currentProject);
            }
    
            // Populate dropdown with projects
            data.projects.forEach(project => {
                const isSelected = project === currentProject;
                const option = new Option(project, project, isSelected, isSelected);
                $projectSelect.append(option);
            });
    
            // Ensure the dropdown shows the current selection
            $projectSelect.val(currentProject);
        }
    
        // Update button visibility
        const hasProjects = data.projects && data.projects.length > 0;
        $('[data-bs-target="#id_modal_delete_project"]').prop('disabled', !hasProjects);
    
        // Trigger projectChanged event if we have a current project
        if (currentProject && currentProject !== "undefined") {
            const event = new CustomEvent('projectChanged', { 
                detail: { projectName: currentProject } 
            });
            document.dispatchEvent(event);
        }
    
        // Show create project dialog if no projects exist
        if (!hasProjects) {
            $("#id_modal_create_project").modal('show');
        }
    }

    function updateUIForProject(projectName) {
        // Update any UI elements that depend on the current project
        // This will be called after project changes
        if (AppState.lastSelectedOption) {
            loadContentBasedOnCurrentView(AppState.lastSelectedOption);
        }
    
        // Update page title or other elements if needed
        document.title = `${projectName} - Edge Vision Framework`;
    }

    async function handleProjectChange(projectName) {
        // Update state and storage
        AppState.currentProject = projectName;
        sessionStorage.setItem("project_name", projectName);
        console.log('Project changed to:', projectName);

        // Notify other components about project change
        const event = new CustomEvent('projectChanged', { 
            detail: { projectName: projectName } 
        });
        document.dispatchEvent(event);
        updateUIForProject(projectName);
    }

    function handleSidebarClick(section) {
        AppState.lastSelectedOption = section;
        loadContentBasedOnCurrentView();
    }

    async function loadContentBasedOnCurrentView(view) {
        const projectName = AppState.currentProject;
        if (!projectName) return;

        // Clear existing content
        clearProjectRelatedItems();

        // Load appropriate content based on view
        switch(view) {
            case 'datasets':
                if (window.DatasetManager) {
                    await window.DatasetManager.loadDatasetList();
                }                break;
            case 'models':
                if (window.ModelsManager) {
                    await window.ModelsManager.loadModelList();
                }                break;
            case 'experiments':
                if (window.Experiments) {
                    await window.Experiments.loadRunsList();
                }                break;
            // ... other cases
        }
    }

    function showNotification(message, type = 'info') {
        $.notify(message, {
            className: type,
            position: 'bottom right'
        });
    }

    function clearProjectRelatedItems() {
        $('#id_table_body').html("");
        // Clear any other project-specific content
    }

    async function handleLogout() {
        try {
            const response = await fetch("/auth/logout", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                }
            });

            const data = await response.json();
            if (!data.err) {
                showNotification("Logout successful!", "success");
            } else {
                showNotification(data.err, "error");
            }

            sessionStorage.removeItem("project_name");
            window.location.href = "/";
        } catch (error) {
            console.error("Logout error:", error);
            showNotification("Failed to logout", "error");
            sessionStorage.removeItem("project_name");
            window.location.href = "/";
        }
    }

    async function handleNextStepInCreateExperiment() {
        const experimentName = $("#id_experiment_name").val();
        if (!validateExperimentName(experimentName)) {
            showNotification("Experiment name is not valid! (only letters, numbers, - and _ are allowed)", "error");
            return;
        }

        createExperiment(experimentName);
    }
    async function createExperiment(experimentName) {
        try {
            const response = await fetch("/experiment/create", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({ experiment_name: experimentName })
            });

            const data = await response.json();
            if (!data.err) {
                showNotification("Experiment created successfully!", "success");
            } else {
                showNotification(data.err, "error");
            }

            // Load the next step in the create experiment process
            loadNextStepInCreateExperiment();
        } catch (error) {
            console.error("Create experiment error:", error);
            showNotification("Failed to create experiment", "error");
            loadNextStepInCreateExperiment();
        }
    }

    async function loadNextStepInCreateExperiment() {
        try {
            const response = await fetch("/experiment/list", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                }
            });

            const data = await response.json();
            if (!data.err) {
                updateCreateExperimentForm(data.res);
            } else {
                showNotification(data.err, "error");
            }
        } catch (error) {
            console.error("Load next step in create experiment error:", error);
            showNotification("Failed to load next step", "error");
        }
    }

    function updateCreateExperimentForm(data) {
        // Update the form based on the data from the server
        $("#id_experiment_name").val(data.experiment_name);
        $("#id_project_id").val(data.project_id);

        // Show the experiment creation dialog
        $("#id_modal_create_experiment").modal('show');
    }

    // Event listeners for project changes
    document.addEventListener('DOMContentLoaded', function() {
        // Initial load
        loadProjects();

        // Listen for storage changes (for multi-tab support)
        window.addEventListener('storage', function(e) {
            if (e.key === 'project_name') {
                const newProject = e.newValue;
                if (newProject !== AppState.currentProject) {
                    AppState.currentProject = newProject;
                    handleProjectChange(newProject);
                }
            }
        });
    });

    return {
        AppState: AppState,
        showNotification: showNotification,
        loadProjects: loadProjects,
        getCurrent: () => AppState.currentProject,
        handleNextStepInCreateExperiment: handleNextStepInCreateExperiment,
    };
    })();

    window.App = App;

=== ./static/src/jobs.js ===
$(document).ready(function () {
    init_handlers()
    set_editors()
    request_list()
});

function init_handlers() {

    $("#id_search").on("keyup", function () {
        var value = $(this).val().toLowerCase();
        $("#id_table_body tr").filter(function () {
            f1 = $(this).find("td:nth-child(1)").text().toLowerCase().indexOf(value) > -1
            f2 = $(this).find("td:nth-child(2)").text().toLowerCase().indexOf(value) > -1
            f3 = $(this).find("td:nth-child(3)").text().toLowerCase().indexOf(value) > -1
            f4 = $(this).find("td:nth-child(4)").text().toLowerCase().indexOf(value) > -1
            $(this).toggle(f1 || f2 || f3 || f4)
        });
    })

    //if project is changed, update model list
    $('#id_project').change(request_list)
}

function set_editors() {
    var editor = ace.edit("id_modal_log_msg")
    editor.setShowPrintMargin(false)
    editor.setReadOnly(true);
    editor.setTheme("ace/theme/monokai")
    editor.session.setMode("ace/mode/json")
    editor.setValue("", -1)
}

function request_list() {
    body = {
        'project_name': sessionStorage.getItem('project_name'),
    }

    $.ajax({
        type: "post",
        contentType: "application/json",
        url: "/jobs/list",
        data: JSON.stringify(body),
        dataType: 'json',
        timeout: 60 * 1000,
        success: function (msg) {
            if (msg['err'] == null) {
                show_list(msg['res'])
                // $.notify("list updated", "success")
            } else {
                $.notify(msg['err']);
            }
        },
        error: function (e) {
            $.notify(e.statusText);
        }
    });
}

function show_list(data) {

    //model_name
    //tag
    //task
    //mode
    //accuracy
    //progress
    //elapsed_time

    temp = ""
    for (var k in data) {
        temp += `
        <tr>
            <td>${data[k]['meta']['model_name'] + ":" + data[k]['meta']['tag']}</td>
            <td>
                ${data[k]['meta']['task']}
            </td>											
            <td>
                ${data[k]['meta']['mode']}
            </td>
            <td>
                ${data[k]['progress']['accuracy']}
            </td>
            <td>
                ${data[k]['progress']['elapsed_time']}
            </td>																			
            <td class="text-sm-center">
                <small class="text-sm-center">${data[k]['progress']['progress']}%</small>
                <progress class="progress" value="${data[k]['progress']['progress']}" max="100"></progress>
            </td>
            <td class="text-end">
                <div class="dropdown">
                    <button class="btn btn-sm dropdown-toggle" type="button" aria-haspopup="true" data-bs-toggle="dropdown">
                        Actions
                    </button>
                    <ul class="dropdown-menu">
                        <li><a class="dropdown-item" href="#" onclick="on_cancel('${k}')">Cancel</a></li>
                        <li><a class="dropdown-item" href="#" onclick="on_delete('${k}')">Delete</a></li>
                        <li><a class="dropdown-item" href="#" onclick="on_log('${k}')">Log</a></li>
                        <li><a class="dropdown-item" href="#" onclick="on_graph('${k}')">Graph</a></li>
                    </ul>
                </div>
            </td>
        </tr>
        `
    }
    $("#id_table_body").html(temp)
}

function on_cancel(name) {
    console.log(name)
    $("#id_modal_confirm_msg").html(`Do you really want to cancel job?<br/><span class="badge bg-red-lt">ID: ${name}</span>`)
    $("#id_modal_confirm_ok").attr("onclick", `on_cancel_ok('${name}')`)
    $("#id_modal_confirm_ok").html("Yes!")
    $("#id_modal_confirm").modal('toggle')
}

function on_cancel_ok(name) {
    body = {
        'project_name': sessionStorage.getItem('project_name'),
        'job_name': name,
    }

    $.ajax({
        type: "post",
        contentType: "application/json",
        url: "/jobs/cancel",
        data: JSON.stringify(body),
        dataType: 'json',
        timeout: 60 * 1000,
        success: function (msg) {
            if (msg['err'] == null) {
                $.notify("job canceled", "success");
                request_list()
            } else {
                $.notify(msg['err']);
            }
        },
        error: function (e) {
            $.notify(e.statusText);
        }
    });
}

function on_delete(name) {
    console.log(name)
    $("#id_modal_confirm_msg").html(`Do you really want to delete job?<br/><span class="badge bg-red-lt">ID: ${name}</span>`)
    $("#id_modal_confirm_ok").attr("onclick", `on_delete_ok('${name}')`)
    $("#id_modal_confirm_ok").html("Delete")
    $("#id_modal_confirm").modal('toggle')
}

function on_delete_ok(name) {
    body = {
        'project_name': sessionStorage.getItem('project_name'),
        'job_name': name,
    }

    $.ajax({
        type: "post",
        contentType: "application/json",
        url: "/jobs/delete",
        data: JSON.stringify(body),
        dataType: 'json',
        timeout: 60 * 1000,
        success: function (msg) {
            if (msg['err'] == null) {
                $.notify("job deleted", "success");
                request_list()
            } else {
                $.notify(msg['err']);
            }
        },
        error: function (e) {
            $.notify(e.statusText);
        }
    });
}

function on_log(name) {
    console.log(name)

    body = {
        'project_name': sessionStorage.getItem('project_name'),
        'job_name': name,
    }

    $.ajax({
        type: "post",
        contentType: "application/json",
        url: "/jobs/log",
        data: JSON.stringify(body),
        dataType: 'json',
        timeout: 60 * 1000,
        success: function (msg) {
            if (msg['err'] == null) {
                ace.edit("id_modal_log_msg").setValue(msg['res'], -1)
                $("#id_modal_log").modal('toggle')
            } else {
                $.notify(msg['err']);
            }
        },
        error: function (e) {
            $.notify(e.statusText);
        }
    });
}

function on_graph(name) {
    console.log(name)

    body = {
        'project_name': sessionStorage.getItem('project_name'),
        'job_name': name,
    }

    $.ajax({
        type: "post",
        contentType: "application/json",
        url: "/jobs/graph",
        data: JSON.stringify(body),
        dataType: 'json',
        timeout: 60 * 1000,
        success: function (msg) {
            if (msg['err'] == null) {
                draw_charts(msg['res'])
                $("#id_modal_graph").modal('toggle')
            } else {
                $.notify(msg['err']);
            }
        },
        error: function (e) {
            $.notify(e.statusText);
        }
    });
}

// create function, convert data to temp format
function convertData(data) {
    temp = {}
    for (var key in data) {
        temp[key] = {
            x: [],
            y: []
        }
        for (var i = 0; i < data[key].length; i++) {
            temp[key].x.push(data[key][i][0])
            temp[key].y.push(data[key][i][1])
        }
    }
    return temp
}

function draw_charts(data) {

    var options = {
        series: [ 
            {
                name: "series_name",
                data: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
            },
        ],
        chart: {
            height: 300,
            type: 'line',
            zoom: {
                enabled: false
            }
        },
        colors: ['#77B6EA', '#545454'],
        dataLabels: {
            enabled: false
        },
        // stroke: {
        //     curve: 'straight'
        // },
        title: {
            text: 'chart_name',
            align: 'left'
        },
        xaxis: {
            categories: ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10'],
            title: {
                text: 'x'
            }
        },
        yaxis: {
            title: {
                text: 'y'
            }
        },        
    };


    data = convertData(data)

    temp = ""
    for(var key in data) {
        temp += `<div id="id_modal_graph_chart_${key}" class="card mt-0 mb-3"></div>`
    }
    $("#id_modal_graph_body").html(temp)

    for(var key in data) {
        // copy options object
        var opt = JSON.parse(JSON.stringify(options));

        opt['series'][0]['name'] = key
        opt['series'][0]['data'] = data[key]['y']
        opt['xaxis']['categories'] = data[key]['x']
        opt['title']['text'] = key        
        var chart = new ApexCharts(document.querySelector(`#id_modal_graph_chart_${key}`), opt);
        chart.render();
    }

    
        

    // temp = ""
    // for (var i = 1; i < 5; i++) {
    //     //temp += `<div id="id_modal_graph_chart${i}" class="mx-2 my-2" style="height: 20rem"></div>`
    //     temp += `<div id="id_modal_graph_chart${i}" class="card mt-0 mb-3"></div>`

    // }
    // $("#id_modal_graph_body").html(temp)

    // // Loss
    // // Accuracy Viewer
    // chart_list = ['Loss', 'Accuracy', 'Model Size vs. Accuracy', 'Model FLOPs vs. Accuracy']
    // for (var i = 0; i < chart_list.length; i++) {
    //     options['title']['text'] = chart_list[i]
    //     var chart = new ApexCharts(document.querySelector(`#id_modal_graph_chart${i+1}`), options);
    //     chart.render();
    // }
}
=== ./static/src/optimize.js ===
$(document).ready(function () {
    // Initialize Ace Editor when the modal is shown
    $('#id_modal_create_optimization').on('shown.bs.modal', function () {
        if (!window.editorOptimizePy) {
            window.editorOptimizePy = ace.edit("editor_optimize_py");
            editorOptimizePy.setTheme("ace/theme/monokai");
            editorOptimizePy.session.setMode("ace/mode/python");
            editorOptimizePy.setOptions({
                maxLines: Infinity,
                minLines: 30
            });
        }

        // Load models into the dropdown
        loadModelOptions();

        // Load templates into the dropdown
        loadTemplateOptions();
    });

    // When the modal is hidden, clear the editor and reset form fields
    $('#id_modal_create_optimization').on('hidden.bs.modal', function () {
        $('#id_original_model_name').empty();
        $('#id_optimize_method_name').val('');
        $('#id_optimization_template').empty();
        if (window.editorOptimizePy) {
            editorOptimizePy.setValue('', -1);
        }
    });

    // Handle Template Selection Change
    $('#id_optimization_template').change(function () {
        const templateFile = $(this).val();
        console.log('Template selected:', templateFile);
        if (templateFile) {
            loadTemplateFile(templateFile);
        } else {
            editorOptimizePy.setValue('', -1);
        }
    });

    // Handle Create Optimization Button Click
    $('#id_create_optimization_ok').click(async function () {
        const originalModelName = $('#id_original_model_name').val();
        const optimizeMethodName = $('#id_optimize_method_name').val();
        const optimizationCode = editorOptimizePy.getValue();

        // Validate input fields
        if (!originalModelName || !optimizeMethodName || !optimizationCode) {
            $.notify("Please fill in all the required fields.", "error");
            return;
        }

        // Prepare the payload
        const payload = {
            original_model_name: originalModelName,
            optimize_method_name: optimizeMethodName,
            optimization_code: optimizationCode,
            project_name: sessionStorage.getItem('project_name')
        };

        console.log('Saving optimization with payload:', payload);

        try {
            // Send the request to save the optimization
            const response = await fetch(`/optimizations/save`, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify(payload)
            });

            const data = await response.json();
            console.log('Response from save optimization:', data);

            if (!data.error) {
                $.notify("Optimization created successfully!", "success");
                $('#id_modal_create_optimization').modal('hide');
                loadOptimizationList();
            } else {
                $.notify(data.error, "error");
            }
        } catch (error) {
            console.error("Create optimization error:", error);
            $.notify("Failed to create optimization.", "error");
        }
    });

    // Function to Load Model Options
    async function loadModelOptions() {
        console.log('Loading model options...');
        try {
            const response = await fetch(`/models/list`, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({ project_name: sessionStorage.getItem('project_name') })
            });

            const data = await response.json();
            console.log('Models data:', data);

            if (!data.error) {
                const $modelSelect = $('#id_original_model_name');
                $modelSelect.empty();

                if (data.models.length === 0) {
                    $modelSelect.append('<option value="">No models available</option>');
                    $.notify("No models available. Please create a model first.", "warning");
                } else {
                    $modelSelect.append('<option value="">Select a model</option>');
                    data.models.forEach(model => {
                        $modelSelect.append(`<option value="${model.model_name}">${model.model_name}</option>`);
                    });
                }
            } else {
                $.notify(data.error, "error");
            }
        } catch (error) {
            console.error("Load model options error:", error);
            $.notify("Failed to load models.", "error");
        }
    }

    // Function to Load Template Options
    async function loadTemplateOptions() {
        console.log('Loading template options...');
        try {
            const response = await fetch(`/optimizations/templates`, {
                method: "GET",
                headers: {
                    "Content-Type": "application/json",
                }
            });

            const data = await response.json();
            console.log('Templates data:', data);

            if (!data.error) {
                const $templateSelect = $('#id_optimization_template');
                $templateSelect.empty();

                if (data.templates.length === 0) {
                    $templateSelect.append('<option value="">No templates available</option>');
                    $.notify("No optimization templates found.", "warning");
                } else {
                    $templateSelect.append('<option value="">Select a template</option>');
                    data.templates.forEach(template => {
                        $templateSelect.append(`<option value="${template}">${template}</option>`);
                    });
                }
            } else {
                $.notify(data.error, "error");
            }
        } catch (error) {
            console.error("Load template options error:", error);
            $.notify("Failed to load templates.", "error");
        }
    }

    // Function to Load Template File into Ace Editor
    async function loadTemplateFile(templateFile) {
        console.log('Loading template file:', templateFile);
        try {
            const response = await fetch(`/optimizations/load_template`, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({ template_file: templateFile })
            });

            const data = await response.json();
            console.log('Template file content:', data);

            if (!data.error) {
                editorOptimizePy.setValue(data.template_content, -1);
            } else {
                $.notify(data.error, "error");
            }
        } catch (error) {
            console.error("Load template file error:", error);
            $.notify("Failed to load template file.", "error");
        }
    }

    // Function to Load Optimization List
    async function loadOptimizationList() {
        console.log('Loading optimization list...');
        try {
            const response = await fetch(`/optimizations/list`, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({ project_name: sessionStorage.getItem('project_name') })
            });

            const data = await response.json();
            console.log('Optimizations data:', data);

            if (!data.error) {
                updateOptimizationTable(data.optimizations);
            } else {
                $.notify(data.error, "error");
            }
        } catch (error) {
            console.error("Load optimization list error:", error);
            $.notify("Failed to load optimizations.", "error");
        }
    }

    // Function to Update Optimization Table
    function updateOptimizationTable(optimizations) {
        console.log('Updating optimization table with:', optimizations);
        const $tableBody = $('#id_table_body_optimizations');
        $tableBody.empty();

        if (optimizations.length === 0) {
            $tableBody.append('<tr><td colspan="4" class="text-center">No optimizations available</td></tr>');
        } else {
            optimizations.forEach(opt => {
                const $row = $(
                    `<tr>
                        <td>${opt.original_model_name}</td>
                        <td>${opt.optimize_method_name}</td>
                        <td>${opt.misc || ''}</td>
                        <td>
                            <button class="btn btn-sm btn-warning" onclick="editOptimization('${opt.optimize_method_name}')">Edit</button>
                            <button class="btn btn-sm btn-danger" onclick="deleteOptimization('${opt.optimize_method_name}')">Delete</button>
                        </td>
                    </tr>`
                );
                $tableBody.append($row);
            });
        }
    }

    // Handle Edit Optimization
    window.editOptimization = function (optimizeMethodName) {
        // TODO: Implement edit functionality
        $.notify("Edit functionality is not implemented yet.", "info");
    };

    // Handle Delete Optimization
    window.deleteOptimization = async function (optimizeMethodName) {
        if (!confirm("Are you sure you want to delete this optimization?")) {
            return;
        }

        console.log('Deleting optimization:', optimizeMethodName);

        try {
            const response = await fetch(`/optimizations/delete`, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({ optimize_method_name: optimizeMethodName, project_name: sessionStorage.getItem('project_name') })
            });

            const data = await response.json();
            console.log('Response from delete optimization:', data);

            if (!data.error) {
                $.notify("Optimization deleted successfully!", "success");
                loadOptimizationList();
            } else {
                $.notify(data.error, "error");
            }
        } catch (error) {
            console.error("Delete optimization error:", error);
            $.notify("Failed to delete optimization.", "error");
        }
    };

    // Initial Load of Optimization List
    loadOptimizationList();
});

=== ./static/src/runs.js ===
$(document).ready(function () {
    // Declare Ace Editor instances
    let editorEnginePy = null;
    let editorEditEnginePy = null;

    // Initialize Ace Editors for Create Run Modal
    $('#id_modal_create_run').on('shown.bs.modal', function () {
        console.log("Create Run Modal shown.");
        if (!editorEnginePy) {
            editorEnginePy = ace.edit("editor_engine_py");
            editorEnginePy.setTheme("ace/theme/monokai");
            editorEnginePy.session.setMode("ace/mode/python");
            editorEnginePy.setOptions({
                maxLines: Infinity,
                minLines: 30,
                readOnly: false,
                highlightActiveLine: true,
                showPrintMargin: false
            });
            editorEnginePy.setValue('', -1); // Ensure editor is empty
            console.log("Initialized Ace Editor for Create Run.");
        } else {
            editorEnginePy.setValue('', -1); // Reset editor when modal is opened
            console.log("Reset Ace Editor for Create Run.");
        }

        // Reset form fields and disable generate button
        $('#id_run_name').val('');
        $('#id_num_gpus').val('1');
        $('#id_generate_engine_code').prop('disabled', true);
        console.log("Reset Create Run form fields.");
    });

    // Initialize Ace Editors for Edit Run Modal
    $('#id_modal_edit_run').on('show.bs.modal', function () {
        console.log("Edit Run Modal shown.");
        if (!editorEditEnginePy) {
            editorEditEnginePy = ace.edit("editor_edit_engine_py");
            editorEditEnginePy.setTheme("ace/theme/monokai");
            editorEditEnginePy.session.setMode("ace/mode/python");
            editorEditEnginePy.setOptions({
                maxLines: Infinity,
                minLines: 30,
                readOnly: false,
                highlightActiveLine: true,
                showPrintMargin: false
            });
            console.log("Initialized Ace Editor for Edit Run.");
        } else {
            editorEditEnginePy.setValue('', -1); // Reset editor when modal is opened
            console.log("Reset Ace Editor for Edit Run.");
        }
    });

    
    // Function to fetch and populate dropdowns
    function loadDropdowns(selectModelId, selectDatasetId, selectOptimizationId) {
        console.log(`Loading dropdowns: Model (${selectModelId}), Dataset (${selectDatasetId}), Optimization (${selectOptimizationId})`);
        const projectName = sessionStorage.getItem('project_name');
        const payload = { project_name: projectName };

        // Fetch Models
        $.ajax({
            url: '/models/list',
            method: 'POST',
            contentType: 'application/json',
            data: JSON.stringify(payload),
            dataType: 'json',
            success: function (data) {
                if (!data.error) {
                    const models = data.models;
                    const $selectModel = $(selectModelId);
                    $selectModel.empty().append(`<option value="">Select a Model</option>`);
                    models.forEach(function (model) {
                        $selectModel.append(`<option value="${model.model_name}">${model.model_name}</option>`);
                    });
                    console.log("Models loaded successfully.");
                } else {
                    toastr.error(data.error);
                    console.error("Error loading models:", data.error);
                }
            },
            error: function (jqXHR, textStatus, errorThrown) {
                toastr.error("Failed to load models.");
                console.error("AJAX error loading models:", textStatus, errorThrown);
            }
        });

        // Fetch Datasets
        $.ajax({
            url: '/datasets/list',
            method: 'POST',
            contentType: 'application/json',
            data: JSON.stringify(payload),
            dataType: 'json',
            success: function (data) {
                if (!data.error) {
                    const datasets = data.datasets;
                    const $selectDataset = $(selectDatasetId);
                    $selectDataset.empty().append(`<option value="">Select a Dataset</option>`);
                    datasets.forEach(function (dataset) {
                        $selectDataset.append(`<option value="${dataset.dataset_name}">${dataset.dataset_name}</option>`);
                    });
                    console.log("Datasets loaded successfully.");
                } else {
                    toastr.error(data.error);
                    console.error("Error loading datasets:", data.error);
                }
            },
            error: function (jqXHR, textStatus, errorThrown) {
                toastr.error("Failed to load datasets.");
                console.error("AJAX error loading datasets:", textStatus, errorThrown);
            }
        });

        // Fetch Optimizations
        $.ajax({
            url: '/optimizations/list',
            method: 'POST',
            contentType: 'application/json',
            data: JSON.stringify(payload),
            dataType: 'json',
            success: function (data) {
                if (!data.error) {
                    const optimizations = data.optimizations;
                    const $selectOptimization = $(selectOptimizationId);
                    $selectOptimization.empty().append(`<option value="">Select an Optimization</option>`);
                    optimizations.forEach(function (opt) {
                        $selectOptimization.append(`<option value="${opt.optimize_method_name}">${opt.optimize_method_name}</option>`);
                    });
                    console.log("Optimizations loaded successfully.");
                } else {
                    toastr.error(data.error);
                    console.error("Error loading optimizations:", data.error);
                }
            },
            error: function (jqXHR, textStatus, errorThrown) {
                toastr.error("Failed to load optimizations.");
                console.error("AJAX error loading optimizations:", textStatus, errorThrown);
            }
        });
    }

    // Function to validate run name
    function isValidName(name) {
        const reservedWords = ['import', 'from', 'as', 'class', 'def', 'return', 'pass', 'if', 'else', 'for', 'while']; // Extend as needed
        const invalidPattern = /[^a-zA-Z0-9_]/; // Only allow alphanumerics and underscores
        const isValid = !reservedWords.includes(name) && !invalidPattern.test(name);
        console.log(`Validating run name '${name}':`, isValid);
        return isValid;
    }

    // Function to check selections in Create Run Modal
    function checkSelectionsCreate() {
        const runName = $('#id_run_name').val().trim();
        const modelSelected = $('#id_select_model').val() !== "";
        const datasetSelected = $('#id_select_dataset').val() !== "";
        const optimizationSelected = $('#id_select_optimization').val() !== "";
        const numGpus = $('#id_num_gpus').val().trim();

        const allSelected = runName !== "" && modelSelected && datasetSelected && optimizationSelected && numGpus !== "";

        $('#id_generate_engine_code').prop('disabled', !allSelected);
        console.log(`Check Create Run selections: ${allSelected ? 'Enabled' : 'Disabled'}`);
    }

    // Function to check selections in Edit Run Modal
    function checkSelectionsEdit() {
        const runName = $('#id_edit_run_name').val().trim();
        const modelSelected = $('#id_edit_select_model').val() !== "";
        const datasetSelected = $('#id_edit_select_dataset').val() !== "";
        const optimizationSelected = $('#id_edit_select_optimization').val() !== "";
        const numGpus = $('#id_edit_num_gpus').val().trim();

        const allSelected = runName !== "" && modelSelected && datasetSelected && optimizationSelected && numGpus !== "";

        $('#id_generate_edit_engine_code').prop('disabled', !allSelected);
        console.log(`Check Edit Run selections: ${allSelected ? 'Enabled' : 'Disabled'}`);
    }

    // Attach change event listeners to Create Run dropdowns and inputs
    $('#id_run_name, #id_select_model, #id_select_dataset, #id_select_optimization, #id_num_gpus').on('input change', checkSelectionsCreate);

    // Attach change event listeners to Edit Run dropdowns and inputs
    $('#id_edit_run_name, #id_edit_select_model, #id_edit_select_dataset, #id_edit_select_optimization, #id_edit_num_gpus').on('input change', checkSelectionsEdit);

    // Load dropdowns when Create Run Modal is opened
    $('#id_modal_create_run').on('show.bs.modal', function () {
        loadDropdowns('#id_select_model', '#id_select_dataset', '#id_select_optimization');
    });

    // Load dropdowns when Edit Run Modal is opened
    $('#id_modal_edit_run').on('show.bs.modal', function () {
        loadDropdowns('#id_edit_select_model', '#id_edit_select_dataset', '#id_edit_select_optimization');
    });

    // Function to generate engine.py code in Create Run Modal
    async function generateEngineCodeCreate() {
        const modelName = $('#id_select_model').val();
        const datasetName = $('#id_select_dataset').val();
        const optimizationName = $('#id_select_optimization').val();
        const numGpus = parseInt($('#id_num_gpus').val()) || 1;

        console.log("Generating engine.py for Create Run with:", { modelName, datasetName, optimizationName, numGpus });

        if (!modelName || !datasetName || !optimizationName || !numGpus) {
            toastr.error("Please ensure all fields are selected.");
            console.warn("Missing fields for engine.py generation.");
            return;
        }

        try {
            // Fetch import.txt
            console.log("Fetching import.txt template.");
            const importResponse = await fetch(`/runs/get_template?file=import.txt`);
            if (!importResponse.ok) {
                throw new Error("Failed to fetch import.txt");
            }
            const importText = await importResponse.text();

            // Fetch engine.txt
            console.log("Fetching engine.txt template.");
            const engineResponse = await fetch(`/runs/get_template?file=engine.txt`);
            if (!engineResponse.ok) {
                throw new Error("Failed to fetch engine.txt");
            }
            const engineText = await engineResponse.text();

            // Dynamic imports based on selections
            let dynamicImports = `
        from model.${modelName}.model import Model as _Model
        from dataset.${datasetName}.dataset import Dataset as _Dataset
        from optimization.${optimizationName}.optimization import Optimization as _Optimization
        `;

            // Set CUDA device based on number of GPUs
            let cudaDevices = '';
            for (let i = 0; i < numGpus; i++) {
                cudaDevices += `cuda:${i}, `;
            }
            cudaDevices = cudaDevices.slice(0, -2); // Remove trailing comma and space

            // Combine all parts
            let finalCode = `${importText}

        ${dynamicImports}

        # Set CUDA devices
        os.environ["CUDA_VISIBLE_DEVICES"] = "${cudaDevices}"

        ${engineText}
        `;

            editorEnginePy.setValue(finalCode.trim(), -1); // Insert code into editor
            toastr.success("Engine code generated successfully.");
            console.log("Engine code generated and inserted into editor.");
        } catch (error) {
            console.error("Error generating engine code:", error);
            toastr.error("Failed to generate engine code.");
        }
    }

    // Function to generate engine.py code in Edit Run Modal
    async function generateEngineCodeEdit() {
        const modelName = $('#id_edit_select_model').val();
        const datasetName = $('#id_edit_select_dataset').val();
        const optimizationName = $('#id_edit_select_optimization').val();
        const numGpus = parseInt($('#id_edit_num_gpus').val()) || 1;

        console.log("Generating engine.py for Edit Run with:", { modelName, datasetName, optimizationName, numGpus });

        if (!modelName || !datasetName || !optimizationName || !numGpus) {
            toastr.error("Please ensure all fields are selected.");
            console.warn("Missing fields for engine.py generation in Edit Run.");
            return;
        }

        try {
            // Fetch import.txt
            console.log("Fetching import.txt template.");
            const importResponse = await fetch(`/runs/get_template?file=import.txt`);
            if (!importResponse.ok) {
                throw new Error("Failed to fetch import.txt");
            }
            const importText = await importResponse.text();

            // Fetch engine.txt
            console.log("Fetching engine.txt template.");
            const engineResponse = await fetch(`/runs/get_template?file=engine.txt`);
            if (!engineResponse.ok) {
                throw new Error("Failed to fetch engine.txt");
            }
            const engineText = await engineResponse.text();

            // Dynamic imports based on selections
            let dynamicImports = `
        from model.${modelName}.model import Model as _Model
        from dataset.${datasetName}.dataset import Dataset as _Dataset
        from optimization.${optimizationName}.optimization import Optimization as _Optimization
        `;

            // Set CUDA device based on number of GPUs
            let cudaDevices = '';
            for (let i = 0; i < numGpus; i++) {
                cudaDevices += `cuda:${i}, `;
            }
            cudaDevices = cudaDevices.slice(0, -2); // Remove trailing comma and space

            // Combine all parts
            let finalCode = `${importText}

        ${dynamicImports}

        # Set CUDA devices
        os.environ["CUDA_VISIBLE_DEVICES"] = "${cudaDevices}"

        ${engineText}
        `;

            editorEditEnginePy.setValue(finalCode.trim(), -1); // Insert code into editor
            toastr.success("Engine code generated successfully.");
            console.log("Engine code generated and inserted into Edit Run editor.");
        } catch (error) {
            console.error("Error generating engine code:", error);
            toastr.error("Failed to generate engine code.");
        }
    }

    // Handle Generate Basic Engine Code button in Create Run Modal
    $('#id_generate_engine_code').click(function () {
        generateEngineCodeCreate();
    });

    // Handle Generate Basic Engine Code button in Edit Run Modal
    $('#id_generate_edit_engine_code').click(function () {
        generateEngineCodeEdit();
    });

    // Handle Create Run Submission
    $('#id_create_run_ok').click(async function () {
        console.log("Create Run button clicked.");

        const runName = $('#id_run_name').val().trim();
        const modelName = $('#id_select_model').val();
        const datasetName = $('#id_select_dataset').val();
        const optimizationName = $('#id_select_optimization').val();
        const numGpus = parseInt($('#id_num_gpus').val()) || 1;
        const misc = { seed: 42 }; // Default seed, can be extended

        if (!runName || !modelName || !datasetName || !optimizationName) {
            toastr.error("Please fill in all required fields and select all items.");
            console.warn("Create Run validation failed: Missing fields.");
            return;
        }

        // Validate run name
        if (!isValidName(runName)) {
            toastr.error("Run name contains invalid characters or is a reserved keyword.");
            console.warn("Create Run validation failed: Invalid run name.");
            return;
        }

        // Validate number of GPUs
        const totalGpus = parseInt($('#id_gpu_count').text()) || 1;
        if (numGpus < 1 || numGpus > totalGpus) {
            toastr.error(`Please select between 1 and ${totalGpus} GPUs.`);
            console.warn(`Create Run validation failed: Number of GPUs (${numGpus}) out of range.`);
            return;
        }

        const enginePyContent = editorEnginePy.getValue();

        // Assuming config.yaml is either empty or you have another method to handle it
        const configYamlContent = ''; // You can modify this as needed

        const payload = {
            project_name: sessionStorage.getItem('project_name'),
            run_name: runName,
            model_name: modelName,
            dataset_name: datasetName,
            optimization_name: optimizationName,
            num_gpus: numGpus,
            misc: misc,
            engine_py: enginePyContent,
            config_yaml: configYamlContent
        };

        console.log("Sending Create Run payload:", payload);

        try {
            // Disable the Create Run button to prevent multiple submissions
            $('#id_create_run_ok').prop('disabled', true).text('Creating...');
            console.log("Create Run button disabled and text changed to 'Creating...'.");

            const response = await fetch('/runs/create', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload)
            });

            console.log("Create Run POST request sent.");

            const data = await response.json();
            console.log("Received response from /runs/create:", data);

            if (!data.error) {
                toastr.success("Run created successfully! You can start the run when ready.");
                console.log("Run created successfully. Attempting to hide modal.");

                // Hide the modal using Bootstrap 5's Modal API
                const modalElement = document.getElementById('id_modal_create_run');
                const modalInstance = bootstrap.Modal.getInstance(modalElement);
                if (modalInstance) {
                    modalInstance.hide();
                    console.log("Create Run modal hidden using existing Bootstrap Modal instance.");
                } else {
                    // If no instance exists, create one and then hide
                    const newModal = new bootstrap.Modal(modalElement);
                    newModal.hide();
                    console.log("Create Run modal hidden using new Bootstrap Modal instance.");
                }

                // Refresh the runs list
                loadRunList();
                console.log("Runs list refreshed.");
            } else {
                toastr.error(data.error);
                console.error("Error from /runs/create:", data.error);
            }
        } catch (error) {
            console.error("Create run error:", error);
            toastr.error("Failed to create run.");
        } finally {
            $('#id_create_run_ok').prop('disabled', false).text('Create Run');
            console.log("Create Run button re-enabled and text reset to 'Create Run'.");
        }
    });


    // Handle Save Changes in Edit Run Modal
    $('#id_edit_run_ok').click(async function () {
        console.log("Save Changes button clicked in Edit Run Modal.");

        const originalRunName = $('#id_edit_run_name').data('original-name');
        const runName = $('#id_edit_run_name').val().trim();
        const modelName = $('#id_edit_select_model').val();
        const datasetName = $('#id_edit_select_dataset').val();
        const optimizationName = $('#id_edit_select_optimization').val();
        const numGpus = parseInt($('#id_edit_num_gpus').val()) || 1;
        const misc = { seed: 42 }; // Default seed, can be extended

        if (!runName || !modelName || !datasetName || !optimizationName) {
            toastr.error("Please fill in all required fields and select all items.");
            console.warn("Edit Run validation failed: Missing fields.");
            return;
        }

        // Validate run name
        if (!isValidName(runName)) {
            toastr.error("Run name contains invalid characters or is a reserved keyword.");
            console.warn("Edit Run validation failed: Invalid run name.");
            return;
        }

        const enginePyContent = editorEditEnginePy.getValue();

        // Assuming config.yaml is either empty or you have another method to handle it
        const configYamlContent = ''; // You can modify this as needed

        const payload = {
            project_name: sessionStorage.getItem('project_name'),
            original_run_name: originalRunName,
            run_name: runName,
            model_name: modelName,
            dataset_name: datasetName,
            optimization_name: optimizationName,
            num_gpus: numGpus,
            misc: misc,
            engine_py: enginePyContent,
            config_yaml: configYamlContent
        };

        console.log("Sending Edit Run payload:", payload);

        try {
            // Disable the Edit Run button to prevent multiple submissions
            $('#id_edit_run_ok').prop('disabled', true).text('Saving...');
            console.log("Edit Run button disabled and text changed to 'Saving...'.");

            const response = await fetch('/runs/edit', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload)
            });

            console.log("Edit Run POST request sent.");

            const data = await response.json();
            console.log("Received response from /runs/edit:", data);

            if (!data.error) {
                toastr.success("Run updated successfully!");
                console.log("Run updated successfully. Attempting to hide Edit Run modal.");
                $('#id_modal_edit_run').modal('hide');
                console.log("Edit Run modal hidden.");
                loadRunList();
                console.log("Runs list refreshed.");
            } else {
                toastr.error(data.error);
                console.error("Error from /runs/edit:", data.error);
            }
        } catch (error) {
            console.error("Edit run error:", error);
            toastr.error("Failed to edit run.");
        } finally {
            $('#id_edit_run_ok').prop('disabled', false).text('Save Changes');
            console.log("Edit Run button re-enabled and text reset to 'Save Changes'.");
        }
    });

    // Function to fetch and populate run details in Edit Run Modal
    // Function to fetch and populate run details in Edit Run Modal
    window.editRun = async function (runName) {
        console.log(`Edit Run invoked for run: ${runName}`);
        const projectName = sessionStorage.getItem('project_name');

        // Validation
        if (!projectName || !runName) {
            toastr.error("Missing project name or run name.");
            console.error("Missing project name or run name. Cannot proceed with edit.");
            return;
        }

        try {
            // Fetch run details from the server
            const payload = {
                project_name: projectName,
                run_name: runName
            };
            
            console.log("Sending payload to /runs/list:", payload);

            const response = await fetch('/runs/list', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload)
            });

            console.log("Edit Run list POST request sent.");

            if (!response.ok) {
                throw new Error(`Failed to fetch run details: ${response.statusText}`);
            }

            const data = await response.json();
            console.log("Received response from /runs/list:", data);

            if (data.error) {
                toastr.error(data.error);
                console.error("Error from /runs/list:", data.error);
                return;
            }

            const runs = data.runs;
            const run = runs.find(r => r.run_name === runName);
            if (!run) {
                toastr.error(`Run '${runName}' not found.`);
                console.error(`Run '${runName}' not found.`);
                return;
            }

            // Populate the Edit Run Modal with run details
            $('#id_edit_run_name').val(run.run_name).data('original-name', run.run_name);
            $('#id_edit_num_gpus').val(run.num_gpus || 1);
            $('#id_edit_model_name').text(run.model_name);
            $('#id_edit_dataset_name').text(run.dataset_name);
            $('#id_edit_optimization_name').text(run.optimization_name);
            console.log("Populated Edit Run form fields.");

            // Initialize editor if not already initialized
            if (!editorEditEnginePy) {
                editorEditEnginePy = ace.edit("editor_edit_engine_py");
                editorEditEnginePy.setTheme("ace/theme/monokai");
                editorEditEnginePy.session.setMode("ace/mode/python");
                editorEditEnginePy.setOptions({
                    maxLines: Infinity,
                    minLines: 30,
                    readOnly: false,
                    highlightActiveLine: true,
                    showPrintMargin: false
                });
                console.log("Initialized Ace Editor for Edit Run.");
            }

            // Fetch and populate engine.py content
            console.log("Fetching engine.py content for Edit Run.");
            const engineResponse = await fetch(`/runs/get_file?project_name=${encodeURIComponent(projectName)}&run_name=${encodeURIComponent(runName)}&file=engine.py`);
            if (!engineResponse.ok) {
                toastr.error("Failed to fetch engine.py content.");
                console.error("Failed to fetch engine.py content.");
                return;
            }
            const engineData = await engineResponse.json();
            if (engineData.error) {
                toastr.error(engineData.error);
                console.error("Error fetching engine.py:", engineData.error);
                return;
            }
            editorEditEnginePy.setValue(engineData.content, -1);
            console.log("engine.py content loaded into Edit Run editor.");

            // Fetch and populate config.yaml content
            console.log("Fetching config.yaml content for Edit Run.");
            const configResponse = await fetch(`/runs/get_file?project_name=${encodeURIComponent(projectName)}&run_name=${encodeURIComponent(runName)}&file=config.yaml`);
            if (!configResponse.ok) {
                toastr.error("Failed to fetch config.yaml content.");
                console.error("Failed to fetch config.yaml content.");
                return;
            }
            const configData = await configResponse.json();
            if (configData.error) {
                toastr.error(configData.error);
                console.error("Error fetching config.yaml:", configData.error);
                return;
            }

            // Set config.yaml content in a simple text area
            $('#id_config_yaml_editor').val(configData.content);
            console.log("config.yaml content loaded into Edit Run text area.");

            // Show the Edit Run Modal
            $('#id_modal_edit_run').modal('show');
            console.log("Edit Run Modal shown.");

        } catch (error) {
            console.error("Edit run error:", error);
            toastr.error("Failed to fetch run details.");
        }
    };



    // Handle Delete Run Confirmation and Deletion
    window.deleteRun = async function (runName) {
        console.log(`Delete Run invoked for run: ${runName}`);
        if (!confirm(`Are you sure you want to delete run '${runName}'? This action cannot be undone.`)) {
            console.log(`Deletion cancelled for run: ${runName}`);
            return;
        }

        const payload = {
            project_name: sessionStorage.getItem('project_name'),
            run_name: runName
        };

        try {
            // Disable the Delete button to prevent multiple submissions
            console.log(`Disabling Delete button for run: ${runName}`);
            $(`button[onclick="deleteRun('${runName}')"]`).prop('disabled', true);

            const response = await fetch('/runs/delete', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload)
            });

            console.log("Delete Run POST request sent.");

            const data = await response.json();
            console.log("Received response from /runs/delete:", data);

            if (!data.error) {
                toastr.success(`Run '${runName}' deleted successfully.`);
                console.log(`Run '${runName}' deleted successfully.`);
                loadRunList();
            } else {
                toastr.error(data.error);
                console.error(`Error deleting run '${runName}':`, data.error);
            }
        } catch (error) {
            console.error("Delete run error:", error);
            toastr.error("Failed to delete run.");
        } finally {
            $(`button[onclick="deleteRun('${runName}')"]`).prop('disabled', false);
            console.log(`Delete button re-enabled for run: ${runName}`);
        }
    };

    // Handle Start Run
    window.startRun = async function (runName) {
        console.log(`Start Run invoked for run: ${runName}`);
        const payload = {
            project_name: sessionStorage.getItem('project_name'),
            run_name: runName
        };

        try {
            // Disable the Start button to prevent multiple clicks
            console.log(`Disabling Start button for run: ${runName}`);
            $(`button[onclick="startRun('${runName}')"]`).prop('disabled', true).text('Starting...');

            const response = await fetch('/runs/start', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload)
            });

            console.log("Start Run POST request sent.");

            const data = await response.json();
            console.log("Received response from /runs/start:", data);

            if (!data.error) {
                toastr.success(`Run '${runName}' started successfully.`);
                console.log(`Run '${runName}' started successfully.`);
                loadRunList();
            } else {
                toastr.error(data.error);
                console.error(`Error starting run '${runName}':`, data.error);
            }
        } catch (error) {
            console.error("Start run error:", error);
            toastr.error("Failed to start run.");
        } finally {
            $(`button[onclick="startRun('${runName}')"]`).prop('disabled', false).text('Start');
            console.log(`Start button re-enabled for run: ${runName}`);
        }
    };

    // Handle Stop Run
    window.stopRun = async function (runName) {
        console.log(`Stop Run invoked for run: ${runName}`);
        const payload = {
            project_name: sessionStorage.getItem('project_name'),
            run_name: runName
        };
    
        try {
            // Disable the Stop button to prevent multiple clicks
            console.log(`Disabling Stop button for run: ${runName}`);
            $(`button[onclick="stopRun('${runName}')"]`).prop('disabled', true).text('Stopping...');
    
            const response = await fetch('/runs/stop', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload)
            });
    
            console.log("Stop Run POST request sent.");
    
            const data = await response.json();
            console.log("Received response from /runs/stop:", data);
    
            if (!data.error) {
                toastr.success(`Run '${runName}' stopped successfully.`);
                console.log(`Run '${runName}' stopped successfully.`);
                loadRunList(); // Refresh the list of runs to update the status
            } else {
                toastr.error(data.error);
                console.error(`Error stopping run '${runName}':`, data.error);
            }
        } catch (error) {
            console.error("Stop run error:", error);
            toastr.error("Failed to stop run.");
        } finally {
            $(`button[onclick="stopRun('${runName}')"]`).prop('disabled', false).text('Stop');
            console.log(`Stop button re-enabled for run: ${runName}`);
        }
    };

    // Handle View Logs using Server-Sent Events (SSE)
    window.viewLogs = function (runName) {
        console.log(`View Logs invoked for run: ${runName}`);
        const projectName = sessionStorage.getItem('project_name');

        // Open a new window to display logs
        const logWindow = window.open('', '_blank', 'width=800,height=600');
        logWindow.document.write(`<pre id="logContent">Loading logs...</pre>`);

        const eventSource = new EventSource(`/runs/logs?project_name=${encodeURIComponent(projectName)}&run_name=${encodeURIComponent(runName)}`);
        console.log("Opened EventSource for logs.");

        eventSource.onmessage = function (event) {
            const pre = logWindow.document.getElementById('logContent');
            pre.textContent += event.data + '\n';
            logWindow.scrollTo(0, logWindow.document.body.scrollHeight);
        };
        eventSource.onerror = function () {
            eventSource.close();
            const pre = logWindow.document.getElementById('logContent');
            pre.textContent += "\n\n-- Log streaming ended or encountered an error.";
            console.error("EventSource encountered an error or ended.");
        };

        // Handle window close to terminate the EventSource
        logWindow.onbeforeunload = function () {
            eventSource.close();
            console.log("EventSource closed due to log window being closed.");
        };
    };

        // Load runs and update table
    async function loadRunList() {
        console.log("Loading runs list.");
        try {
            const payload = { project_name: sessionStorage.getItem('project_name') };
            const response = await fetch('/runs/list', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload)
            });

            console.log("List Runs POST request sent.");

            const data = await response.json();
            console.log("Received response from /runs/list:", data);

            if (!data.error) {
                updateRunTable(data.runs);
                console.log("Runs table updated.");
            } else {
                toastr.error(data.error);
                console.error("Error loading runs:", data.error);
            }
        } catch (error) {
            console.error("Load run list error:", error);
            toastr.error("Failed to load runs.");
        }
    }

    // Update runs table in the frontend
    function updateRunTable(runs) {
        console.log("Updating runs table.");
        const $tableBody = $('#id_table_body_runs');
        $tableBody.empty();

        if (runs.length === 0) {
            $tableBody.append('<tr><td colspan="8" class="text-center">No runs available</td></tr>');
            console.log("No runs available to display.");
        } else {
            runs.forEach(run => {
                const status = run.status || 'Not Running';
                let actions = '';

                // Conditionally render Start and Stop buttons based on run status
                if (status === "Not Running") {
                    actions += `<button class="btn btn-sm btn-success me-1" onclick="startRun('${run.run_name}')">Start</button>`;
                } else if (status === "Running") {
                    actions += `<button class="btn btn-sm btn-danger me-1" onclick="stopRun('${run.run_name}')">Stop</button>`;
                }

                // Always show Delete, Logs, and Edit buttons
                actions += `
                    <button class="btn btn-sm btn-warning me-1" onclick="deleteRun('${run.run_name}')">Delete</button>
                    <button class="btn btn-sm btn-info me-1" onclick="viewLogs('${run.run_name}')">Logs</button>
                    <button class="btn btn-sm btn-secondary" onclick="editRun('${run.run_name}')">Edit</button>
                `;

                const gpuList = run.gpu_ids && run.gpu_ids.length > 0 ? run.gpu_ids.join(', ') : 'N/A';

                const $row = $(`
                    <tr>
                        <td>${run.run_name}</td>
                        <td>${run.created_date}</td>
                        <td>${run.model_name}</td>
                        <td>${run.dataset_name}</td>
                        <td>${run.optimization_name || ''}</td>
                        <td>${status}</td>
                        <td>${gpuList}</td>
                        <td>${actions}</td>
                    </tr>
                `);
                $tableBody.append($row);
            });
            console.log("Runs table populated with data.");
        }
    }

    // Initial Load of Runs
    loadRunList();

    // Set interval to refresh runs status every 5 seconds
    setInterval(loadRunList, 5000);
});
